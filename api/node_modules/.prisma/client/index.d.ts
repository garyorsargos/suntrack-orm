
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model SolarSystem
 * 
 */
export type SolarSystem = $Result.DefaultSelection<Prisma.$SolarSystemPayload>
/**
 * Model ModuleConfiguration
 * 
 */
export type ModuleConfiguration = $Result.DefaultSelection<Prisma.$ModuleConfigurationPayload>
/**
 * Model InverterConfiguration
 * 
 */
export type InverterConfiguration = $Result.DefaultSelection<Prisma.$InverterConfigurationPayload>
/**
 * Model BatteryConfiguration
 * 
 */
export type BatteryConfiguration = $Result.DefaultSelection<Prisma.$BatteryConfigurationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more SolarSystems
 * const solarSystems = await prisma.solarSystem.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more SolarSystems
   * const solarSystems = await prisma.solarSystem.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.solarSystem`: Exposes CRUD operations for the **SolarSystem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SolarSystems
    * const solarSystems = await prisma.solarSystem.findMany()
    * ```
    */
  get solarSystem(): Prisma.SolarSystemDelegate<ExtArgs>;

  /**
   * `prisma.moduleConfiguration`: Exposes CRUD operations for the **ModuleConfiguration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ModuleConfigurations
    * const moduleConfigurations = await prisma.moduleConfiguration.findMany()
    * ```
    */
  get moduleConfiguration(): Prisma.ModuleConfigurationDelegate<ExtArgs>;

  /**
   * `prisma.inverterConfiguration`: Exposes CRUD operations for the **InverterConfiguration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InverterConfigurations
    * const inverterConfigurations = await prisma.inverterConfiguration.findMany()
    * ```
    */
  get inverterConfiguration(): Prisma.InverterConfigurationDelegate<ExtArgs>;

  /**
   * `prisma.batteryConfiguration`: Exposes CRUD operations for the **BatteryConfiguration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BatteryConfigurations
    * const batteryConfigurations = await prisma.batteryConfiguration.findMany()
    * ```
    */
  get batteryConfiguration(): Prisma.BatteryConfigurationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    SolarSystem: 'SolarSystem',
    ModuleConfiguration: 'ModuleConfiguration',
    InverterConfiguration: 'InverterConfiguration',
    BatteryConfiguration: 'BatteryConfiguration'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "solarSystem" | "moduleConfiguration" | "inverterConfiguration" | "batteryConfiguration"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      SolarSystem: {
        payload: Prisma.$SolarSystemPayload<ExtArgs>
        fields: Prisma.SolarSystemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SolarSystemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolarSystemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SolarSystemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolarSystemPayload>
          }
          findFirst: {
            args: Prisma.SolarSystemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolarSystemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SolarSystemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolarSystemPayload>
          }
          findMany: {
            args: Prisma.SolarSystemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolarSystemPayload>[]
          }
          create: {
            args: Prisma.SolarSystemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolarSystemPayload>
          }
          createMany: {
            args: Prisma.SolarSystemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SolarSystemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolarSystemPayload>[]
          }
          delete: {
            args: Prisma.SolarSystemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolarSystemPayload>
          }
          update: {
            args: Prisma.SolarSystemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolarSystemPayload>
          }
          deleteMany: {
            args: Prisma.SolarSystemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SolarSystemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SolarSystemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolarSystemPayload>
          }
          aggregate: {
            args: Prisma.SolarSystemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSolarSystem>
          }
          groupBy: {
            args: Prisma.SolarSystemGroupByArgs<ExtArgs>
            result: $Utils.Optional<SolarSystemGroupByOutputType>[]
          }
          count: {
            args: Prisma.SolarSystemCountArgs<ExtArgs>
            result: $Utils.Optional<SolarSystemCountAggregateOutputType> | number
          }
        }
      }
      ModuleConfiguration: {
        payload: Prisma.$ModuleConfigurationPayload<ExtArgs>
        fields: Prisma.ModuleConfigurationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ModuleConfigurationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleConfigurationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ModuleConfigurationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleConfigurationPayload>
          }
          findFirst: {
            args: Prisma.ModuleConfigurationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleConfigurationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ModuleConfigurationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleConfigurationPayload>
          }
          findMany: {
            args: Prisma.ModuleConfigurationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleConfigurationPayload>[]
          }
          create: {
            args: Prisma.ModuleConfigurationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleConfigurationPayload>
          }
          createMany: {
            args: Prisma.ModuleConfigurationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ModuleConfigurationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleConfigurationPayload>[]
          }
          delete: {
            args: Prisma.ModuleConfigurationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleConfigurationPayload>
          }
          update: {
            args: Prisma.ModuleConfigurationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleConfigurationPayload>
          }
          deleteMany: {
            args: Prisma.ModuleConfigurationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ModuleConfigurationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ModuleConfigurationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModuleConfigurationPayload>
          }
          aggregate: {
            args: Prisma.ModuleConfigurationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateModuleConfiguration>
          }
          groupBy: {
            args: Prisma.ModuleConfigurationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ModuleConfigurationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ModuleConfigurationCountArgs<ExtArgs>
            result: $Utils.Optional<ModuleConfigurationCountAggregateOutputType> | number
          }
        }
      }
      InverterConfiguration: {
        payload: Prisma.$InverterConfigurationPayload<ExtArgs>
        fields: Prisma.InverterConfigurationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InverterConfigurationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InverterConfigurationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InverterConfigurationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InverterConfigurationPayload>
          }
          findFirst: {
            args: Prisma.InverterConfigurationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InverterConfigurationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InverterConfigurationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InverterConfigurationPayload>
          }
          findMany: {
            args: Prisma.InverterConfigurationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InverterConfigurationPayload>[]
          }
          create: {
            args: Prisma.InverterConfigurationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InverterConfigurationPayload>
          }
          createMany: {
            args: Prisma.InverterConfigurationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InverterConfigurationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InverterConfigurationPayload>[]
          }
          delete: {
            args: Prisma.InverterConfigurationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InverterConfigurationPayload>
          }
          update: {
            args: Prisma.InverterConfigurationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InverterConfigurationPayload>
          }
          deleteMany: {
            args: Prisma.InverterConfigurationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InverterConfigurationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InverterConfigurationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InverterConfigurationPayload>
          }
          aggregate: {
            args: Prisma.InverterConfigurationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInverterConfiguration>
          }
          groupBy: {
            args: Prisma.InverterConfigurationGroupByArgs<ExtArgs>
            result: $Utils.Optional<InverterConfigurationGroupByOutputType>[]
          }
          count: {
            args: Prisma.InverterConfigurationCountArgs<ExtArgs>
            result: $Utils.Optional<InverterConfigurationCountAggregateOutputType> | number
          }
        }
      }
      BatteryConfiguration: {
        payload: Prisma.$BatteryConfigurationPayload<ExtArgs>
        fields: Prisma.BatteryConfigurationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BatteryConfigurationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryConfigurationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BatteryConfigurationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryConfigurationPayload>
          }
          findFirst: {
            args: Prisma.BatteryConfigurationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryConfigurationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BatteryConfigurationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryConfigurationPayload>
          }
          findMany: {
            args: Prisma.BatteryConfigurationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryConfigurationPayload>[]
          }
          create: {
            args: Prisma.BatteryConfigurationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryConfigurationPayload>
          }
          createMany: {
            args: Prisma.BatteryConfigurationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BatteryConfigurationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryConfigurationPayload>[]
          }
          delete: {
            args: Prisma.BatteryConfigurationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryConfigurationPayload>
          }
          update: {
            args: Prisma.BatteryConfigurationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryConfigurationPayload>
          }
          deleteMany: {
            args: Prisma.BatteryConfigurationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BatteryConfigurationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BatteryConfigurationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatteryConfigurationPayload>
          }
          aggregate: {
            args: Prisma.BatteryConfigurationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBatteryConfiguration>
          }
          groupBy: {
            args: Prisma.BatteryConfigurationGroupByArgs<ExtArgs>
            result: $Utils.Optional<BatteryConfigurationGroupByOutputType>[]
          }
          count: {
            args: Prisma.BatteryConfigurationCountArgs<ExtArgs>
            result: $Utils.Optional<BatteryConfigurationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SolarSystemCountOutputType
   */

  export type SolarSystemCountOutputType = {
    moduleConfigurations: number
    inverterConfigurations: number
    batteryConfigurations: number
  }

  export type SolarSystemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    moduleConfigurations?: boolean | SolarSystemCountOutputTypeCountModuleConfigurationsArgs
    inverterConfigurations?: boolean | SolarSystemCountOutputTypeCountInverterConfigurationsArgs
    batteryConfigurations?: boolean | SolarSystemCountOutputTypeCountBatteryConfigurationsArgs
  }

  // Custom InputTypes
  /**
   * SolarSystemCountOutputType without action
   */
  export type SolarSystemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SolarSystemCountOutputType
     */
    select?: SolarSystemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SolarSystemCountOutputType without action
   */
  export type SolarSystemCountOutputTypeCountModuleConfigurationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModuleConfigurationWhereInput
  }

  /**
   * SolarSystemCountOutputType without action
   */
  export type SolarSystemCountOutputTypeCountInverterConfigurationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InverterConfigurationWhereInput
  }

  /**
   * SolarSystemCountOutputType without action
   */
  export type SolarSystemCountOutputTypeCountBatteryConfigurationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BatteryConfigurationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model SolarSystem
   */

  export type AggregateSolarSystem = {
    _count: SolarSystemCountAggregateOutputType | null
    _avg: SolarSystemAvgAggregateOutputType | null
    _sum: SolarSystemSumAggregateOutputType | null
    _min: SolarSystemMinAggregateOutputType | null
    _max: SolarSystemMaxAggregateOutputType | null
  }

  export type SolarSystemAvgAggregateOutputType = {
    pvSystemSizeDc: number | null
    totalInstalledPrice: number | null
    rebateOrGrant: number | null
  }

  export type SolarSystemSumAggregateOutputType = {
    pvSystemSizeDc: number | null
    totalInstalledPrice: number | null
    rebateOrGrant: number | null
  }

  export type SolarSystemMinAggregateOutputType = {
    id: string | null
    dataProvider1: string | null
    dataProvider2: string | null
    systemId1: string | null
    systemId2: string | null
    installationDate: Date | null
    pvSystemSizeDc: number | null
    totalInstalledPrice: number | null
    customerSegment: string | null
    expansionSystem: boolean | null
    multiplePhaseSystem: boolean | null
    rebateOrGrant: number | null
    ttsLinkId: string | null
    newConstruction: boolean | null
    tracking: boolean | null
    groundMounted: boolean | null
    zipCode: string | null
    city: string | null
    state: string | null
    utilityServiceTerritory: string | null
    thirdPartyOwned: boolean | null
    installerName: string | null
    selfInstalled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SolarSystemMaxAggregateOutputType = {
    id: string | null
    dataProvider1: string | null
    dataProvider2: string | null
    systemId1: string | null
    systemId2: string | null
    installationDate: Date | null
    pvSystemSizeDc: number | null
    totalInstalledPrice: number | null
    customerSegment: string | null
    expansionSystem: boolean | null
    multiplePhaseSystem: boolean | null
    rebateOrGrant: number | null
    ttsLinkId: string | null
    newConstruction: boolean | null
    tracking: boolean | null
    groundMounted: boolean | null
    zipCode: string | null
    city: string | null
    state: string | null
    utilityServiceTerritory: string | null
    thirdPartyOwned: boolean | null
    installerName: string | null
    selfInstalled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SolarSystemCountAggregateOutputType = {
    id: number
    dataProvider1: number
    dataProvider2: number
    systemId1: number
    systemId2: number
    installationDate: number
    pvSystemSizeDc: number
    totalInstalledPrice: number
    customerSegment: number
    expansionSystem: number
    multiplePhaseSystem: number
    rebateOrGrant: number
    ttsLinkId: number
    newConstruction: number
    tracking: number
    groundMounted: number
    zipCode: number
    city: number
    state: number
    utilityServiceTerritory: number
    thirdPartyOwned: number
    installerName: number
    selfInstalled: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SolarSystemAvgAggregateInputType = {
    pvSystemSizeDc?: true
    totalInstalledPrice?: true
    rebateOrGrant?: true
  }

  export type SolarSystemSumAggregateInputType = {
    pvSystemSizeDc?: true
    totalInstalledPrice?: true
    rebateOrGrant?: true
  }

  export type SolarSystemMinAggregateInputType = {
    id?: true
    dataProvider1?: true
    dataProvider2?: true
    systemId1?: true
    systemId2?: true
    installationDate?: true
    pvSystemSizeDc?: true
    totalInstalledPrice?: true
    customerSegment?: true
    expansionSystem?: true
    multiplePhaseSystem?: true
    rebateOrGrant?: true
    ttsLinkId?: true
    newConstruction?: true
    tracking?: true
    groundMounted?: true
    zipCode?: true
    city?: true
    state?: true
    utilityServiceTerritory?: true
    thirdPartyOwned?: true
    installerName?: true
    selfInstalled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SolarSystemMaxAggregateInputType = {
    id?: true
    dataProvider1?: true
    dataProvider2?: true
    systemId1?: true
    systemId2?: true
    installationDate?: true
    pvSystemSizeDc?: true
    totalInstalledPrice?: true
    customerSegment?: true
    expansionSystem?: true
    multiplePhaseSystem?: true
    rebateOrGrant?: true
    ttsLinkId?: true
    newConstruction?: true
    tracking?: true
    groundMounted?: true
    zipCode?: true
    city?: true
    state?: true
    utilityServiceTerritory?: true
    thirdPartyOwned?: true
    installerName?: true
    selfInstalled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SolarSystemCountAggregateInputType = {
    id?: true
    dataProvider1?: true
    dataProvider2?: true
    systemId1?: true
    systemId2?: true
    installationDate?: true
    pvSystemSizeDc?: true
    totalInstalledPrice?: true
    customerSegment?: true
    expansionSystem?: true
    multiplePhaseSystem?: true
    rebateOrGrant?: true
    ttsLinkId?: true
    newConstruction?: true
    tracking?: true
    groundMounted?: true
    zipCode?: true
    city?: true
    state?: true
    utilityServiceTerritory?: true
    thirdPartyOwned?: true
    installerName?: true
    selfInstalled?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SolarSystemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SolarSystem to aggregate.
     */
    where?: SolarSystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SolarSystems to fetch.
     */
    orderBy?: SolarSystemOrderByWithRelationInput | SolarSystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SolarSystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SolarSystems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SolarSystems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SolarSystems
    **/
    _count?: true | SolarSystemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SolarSystemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SolarSystemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SolarSystemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SolarSystemMaxAggregateInputType
  }

  export type GetSolarSystemAggregateType<T extends SolarSystemAggregateArgs> = {
        [P in keyof T & keyof AggregateSolarSystem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSolarSystem[P]>
      : GetScalarType<T[P], AggregateSolarSystem[P]>
  }




  export type SolarSystemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SolarSystemWhereInput
    orderBy?: SolarSystemOrderByWithAggregationInput | SolarSystemOrderByWithAggregationInput[]
    by: SolarSystemScalarFieldEnum[] | SolarSystemScalarFieldEnum
    having?: SolarSystemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SolarSystemCountAggregateInputType | true
    _avg?: SolarSystemAvgAggregateInputType
    _sum?: SolarSystemSumAggregateInputType
    _min?: SolarSystemMinAggregateInputType
    _max?: SolarSystemMaxAggregateInputType
  }

  export type SolarSystemGroupByOutputType = {
    id: string
    dataProvider1: string | null
    dataProvider2: string | null
    systemId1: string | null
    systemId2: string | null
    installationDate: Date | null
    pvSystemSizeDc: number | null
    totalInstalledPrice: number | null
    customerSegment: string | null
    expansionSystem: boolean | null
    multiplePhaseSystem: boolean | null
    rebateOrGrant: number | null
    ttsLinkId: string | null
    newConstruction: boolean | null
    tracking: boolean | null
    groundMounted: boolean | null
    zipCode: string | null
    city: string | null
    state: string | null
    utilityServiceTerritory: string | null
    thirdPartyOwned: boolean | null
    installerName: string | null
    selfInstalled: boolean | null
    createdAt: Date
    updatedAt: Date
    _count: SolarSystemCountAggregateOutputType | null
    _avg: SolarSystemAvgAggregateOutputType | null
    _sum: SolarSystemSumAggregateOutputType | null
    _min: SolarSystemMinAggregateOutputType | null
    _max: SolarSystemMaxAggregateOutputType | null
  }

  type GetSolarSystemGroupByPayload<T extends SolarSystemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SolarSystemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SolarSystemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SolarSystemGroupByOutputType[P]>
            : GetScalarType<T[P], SolarSystemGroupByOutputType[P]>
        }
      >
    >


  export type SolarSystemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dataProvider1?: boolean
    dataProvider2?: boolean
    systemId1?: boolean
    systemId2?: boolean
    installationDate?: boolean
    pvSystemSizeDc?: boolean
    totalInstalledPrice?: boolean
    customerSegment?: boolean
    expansionSystem?: boolean
    multiplePhaseSystem?: boolean
    rebateOrGrant?: boolean
    ttsLinkId?: boolean
    newConstruction?: boolean
    tracking?: boolean
    groundMounted?: boolean
    zipCode?: boolean
    city?: boolean
    state?: boolean
    utilityServiceTerritory?: boolean
    thirdPartyOwned?: boolean
    installerName?: boolean
    selfInstalled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    moduleConfigurations?: boolean | SolarSystem$moduleConfigurationsArgs<ExtArgs>
    inverterConfigurations?: boolean | SolarSystem$inverterConfigurationsArgs<ExtArgs>
    batteryConfigurations?: boolean | SolarSystem$batteryConfigurationsArgs<ExtArgs>
    _count?: boolean | SolarSystemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["solarSystem"]>

  export type SolarSystemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dataProvider1?: boolean
    dataProvider2?: boolean
    systemId1?: boolean
    systemId2?: boolean
    installationDate?: boolean
    pvSystemSizeDc?: boolean
    totalInstalledPrice?: boolean
    customerSegment?: boolean
    expansionSystem?: boolean
    multiplePhaseSystem?: boolean
    rebateOrGrant?: boolean
    ttsLinkId?: boolean
    newConstruction?: boolean
    tracking?: boolean
    groundMounted?: boolean
    zipCode?: boolean
    city?: boolean
    state?: boolean
    utilityServiceTerritory?: boolean
    thirdPartyOwned?: boolean
    installerName?: boolean
    selfInstalled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["solarSystem"]>

  export type SolarSystemSelectScalar = {
    id?: boolean
    dataProvider1?: boolean
    dataProvider2?: boolean
    systemId1?: boolean
    systemId2?: boolean
    installationDate?: boolean
    pvSystemSizeDc?: boolean
    totalInstalledPrice?: boolean
    customerSegment?: boolean
    expansionSystem?: boolean
    multiplePhaseSystem?: boolean
    rebateOrGrant?: boolean
    ttsLinkId?: boolean
    newConstruction?: boolean
    tracking?: boolean
    groundMounted?: boolean
    zipCode?: boolean
    city?: boolean
    state?: boolean
    utilityServiceTerritory?: boolean
    thirdPartyOwned?: boolean
    installerName?: boolean
    selfInstalled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SolarSystemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    moduleConfigurations?: boolean | SolarSystem$moduleConfigurationsArgs<ExtArgs>
    inverterConfigurations?: boolean | SolarSystem$inverterConfigurationsArgs<ExtArgs>
    batteryConfigurations?: boolean | SolarSystem$batteryConfigurationsArgs<ExtArgs>
    _count?: boolean | SolarSystemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SolarSystemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SolarSystemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SolarSystem"
    objects: {
      moduleConfigurations: Prisma.$ModuleConfigurationPayload<ExtArgs>[]
      inverterConfigurations: Prisma.$InverterConfigurationPayload<ExtArgs>[]
      batteryConfigurations: Prisma.$BatteryConfigurationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      dataProvider1: string | null
      dataProvider2: string | null
      systemId1: string | null
      systemId2: string | null
      installationDate: Date | null
      pvSystemSizeDc: number | null
      totalInstalledPrice: number | null
      customerSegment: string | null
      expansionSystem: boolean | null
      multiplePhaseSystem: boolean | null
      rebateOrGrant: number | null
      ttsLinkId: string | null
      newConstruction: boolean | null
      tracking: boolean | null
      groundMounted: boolean | null
      zipCode: string | null
      city: string | null
      state: string | null
      utilityServiceTerritory: string | null
      thirdPartyOwned: boolean | null
      installerName: string | null
      selfInstalled: boolean | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["solarSystem"]>
    composites: {}
  }

  type SolarSystemGetPayload<S extends boolean | null | undefined | SolarSystemDefaultArgs> = $Result.GetResult<Prisma.$SolarSystemPayload, S>

  type SolarSystemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SolarSystemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SolarSystemCountAggregateInputType | true
    }

  export interface SolarSystemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SolarSystem'], meta: { name: 'SolarSystem' } }
    /**
     * Find zero or one SolarSystem that matches the filter.
     * @param {SolarSystemFindUniqueArgs} args - Arguments to find a SolarSystem
     * @example
     * // Get one SolarSystem
     * const solarSystem = await prisma.solarSystem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SolarSystemFindUniqueArgs>(args: SelectSubset<T, SolarSystemFindUniqueArgs<ExtArgs>>): Prisma__SolarSystemClient<$Result.GetResult<Prisma.$SolarSystemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SolarSystem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SolarSystemFindUniqueOrThrowArgs} args - Arguments to find a SolarSystem
     * @example
     * // Get one SolarSystem
     * const solarSystem = await prisma.solarSystem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SolarSystemFindUniqueOrThrowArgs>(args: SelectSubset<T, SolarSystemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SolarSystemClient<$Result.GetResult<Prisma.$SolarSystemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SolarSystem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolarSystemFindFirstArgs} args - Arguments to find a SolarSystem
     * @example
     * // Get one SolarSystem
     * const solarSystem = await prisma.solarSystem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SolarSystemFindFirstArgs>(args?: SelectSubset<T, SolarSystemFindFirstArgs<ExtArgs>>): Prisma__SolarSystemClient<$Result.GetResult<Prisma.$SolarSystemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SolarSystem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolarSystemFindFirstOrThrowArgs} args - Arguments to find a SolarSystem
     * @example
     * // Get one SolarSystem
     * const solarSystem = await prisma.solarSystem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SolarSystemFindFirstOrThrowArgs>(args?: SelectSubset<T, SolarSystemFindFirstOrThrowArgs<ExtArgs>>): Prisma__SolarSystemClient<$Result.GetResult<Prisma.$SolarSystemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SolarSystems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolarSystemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SolarSystems
     * const solarSystems = await prisma.solarSystem.findMany()
     * 
     * // Get first 10 SolarSystems
     * const solarSystems = await prisma.solarSystem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const solarSystemWithIdOnly = await prisma.solarSystem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SolarSystemFindManyArgs>(args?: SelectSubset<T, SolarSystemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SolarSystemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SolarSystem.
     * @param {SolarSystemCreateArgs} args - Arguments to create a SolarSystem.
     * @example
     * // Create one SolarSystem
     * const SolarSystem = await prisma.solarSystem.create({
     *   data: {
     *     // ... data to create a SolarSystem
     *   }
     * })
     * 
     */
    create<T extends SolarSystemCreateArgs>(args: SelectSubset<T, SolarSystemCreateArgs<ExtArgs>>): Prisma__SolarSystemClient<$Result.GetResult<Prisma.$SolarSystemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SolarSystems.
     * @param {SolarSystemCreateManyArgs} args - Arguments to create many SolarSystems.
     * @example
     * // Create many SolarSystems
     * const solarSystem = await prisma.solarSystem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SolarSystemCreateManyArgs>(args?: SelectSubset<T, SolarSystemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SolarSystems and returns the data saved in the database.
     * @param {SolarSystemCreateManyAndReturnArgs} args - Arguments to create many SolarSystems.
     * @example
     * // Create many SolarSystems
     * const solarSystem = await prisma.solarSystem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SolarSystems and only return the `id`
     * const solarSystemWithIdOnly = await prisma.solarSystem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SolarSystemCreateManyAndReturnArgs>(args?: SelectSubset<T, SolarSystemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SolarSystemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SolarSystem.
     * @param {SolarSystemDeleteArgs} args - Arguments to delete one SolarSystem.
     * @example
     * // Delete one SolarSystem
     * const SolarSystem = await prisma.solarSystem.delete({
     *   where: {
     *     // ... filter to delete one SolarSystem
     *   }
     * })
     * 
     */
    delete<T extends SolarSystemDeleteArgs>(args: SelectSubset<T, SolarSystemDeleteArgs<ExtArgs>>): Prisma__SolarSystemClient<$Result.GetResult<Prisma.$SolarSystemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SolarSystem.
     * @param {SolarSystemUpdateArgs} args - Arguments to update one SolarSystem.
     * @example
     * // Update one SolarSystem
     * const solarSystem = await prisma.solarSystem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SolarSystemUpdateArgs>(args: SelectSubset<T, SolarSystemUpdateArgs<ExtArgs>>): Prisma__SolarSystemClient<$Result.GetResult<Prisma.$SolarSystemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SolarSystems.
     * @param {SolarSystemDeleteManyArgs} args - Arguments to filter SolarSystems to delete.
     * @example
     * // Delete a few SolarSystems
     * const { count } = await prisma.solarSystem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SolarSystemDeleteManyArgs>(args?: SelectSubset<T, SolarSystemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SolarSystems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolarSystemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SolarSystems
     * const solarSystem = await prisma.solarSystem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SolarSystemUpdateManyArgs>(args: SelectSubset<T, SolarSystemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SolarSystem.
     * @param {SolarSystemUpsertArgs} args - Arguments to update or create a SolarSystem.
     * @example
     * // Update or create a SolarSystem
     * const solarSystem = await prisma.solarSystem.upsert({
     *   create: {
     *     // ... data to create a SolarSystem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SolarSystem we want to update
     *   }
     * })
     */
    upsert<T extends SolarSystemUpsertArgs>(args: SelectSubset<T, SolarSystemUpsertArgs<ExtArgs>>): Prisma__SolarSystemClient<$Result.GetResult<Prisma.$SolarSystemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SolarSystems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolarSystemCountArgs} args - Arguments to filter SolarSystems to count.
     * @example
     * // Count the number of SolarSystems
     * const count = await prisma.solarSystem.count({
     *   where: {
     *     // ... the filter for the SolarSystems we want to count
     *   }
     * })
    **/
    count<T extends SolarSystemCountArgs>(
      args?: Subset<T, SolarSystemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SolarSystemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SolarSystem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolarSystemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SolarSystemAggregateArgs>(args: Subset<T, SolarSystemAggregateArgs>): Prisma.PrismaPromise<GetSolarSystemAggregateType<T>>

    /**
     * Group by SolarSystem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolarSystemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SolarSystemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SolarSystemGroupByArgs['orderBy'] }
        : { orderBy?: SolarSystemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SolarSystemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSolarSystemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SolarSystem model
   */
  readonly fields: SolarSystemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SolarSystem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SolarSystemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    moduleConfigurations<T extends SolarSystem$moduleConfigurationsArgs<ExtArgs> = {}>(args?: Subset<T, SolarSystem$moduleConfigurationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModuleConfigurationPayload<ExtArgs>, T, "findMany"> | Null>
    inverterConfigurations<T extends SolarSystem$inverterConfigurationsArgs<ExtArgs> = {}>(args?: Subset<T, SolarSystem$inverterConfigurationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InverterConfigurationPayload<ExtArgs>, T, "findMany"> | Null>
    batteryConfigurations<T extends SolarSystem$batteryConfigurationsArgs<ExtArgs> = {}>(args?: Subset<T, SolarSystem$batteryConfigurationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BatteryConfigurationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SolarSystem model
   */ 
  interface SolarSystemFieldRefs {
    readonly id: FieldRef<"SolarSystem", 'String'>
    readonly dataProvider1: FieldRef<"SolarSystem", 'String'>
    readonly dataProvider2: FieldRef<"SolarSystem", 'String'>
    readonly systemId1: FieldRef<"SolarSystem", 'String'>
    readonly systemId2: FieldRef<"SolarSystem", 'String'>
    readonly installationDate: FieldRef<"SolarSystem", 'DateTime'>
    readonly pvSystemSizeDc: FieldRef<"SolarSystem", 'Float'>
    readonly totalInstalledPrice: FieldRef<"SolarSystem", 'Float'>
    readonly customerSegment: FieldRef<"SolarSystem", 'String'>
    readonly expansionSystem: FieldRef<"SolarSystem", 'Boolean'>
    readonly multiplePhaseSystem: FieldRef<"SolarSystem", 'Boolean'>
    readonly rebateOrGrant: FieldRef<"SolarSystem", 'Float'>
    readonly ttsLinkId: FieldRef<"SolarSystem", 'String'>
    readonly newConstruction: FieldRef<"SolarSystem", 'Boolean'>
    readonly tracking: FieldRef<"SolarSystem", 'Boolean'>
    readonly groundMounted: FieldRef<"SolarSystem", 'Boolean'>
    readonly zipCode: FieldRef<"SolarSystem", 'String'>
    readonly city: FieldRef<"SolarSystem", 'String'>
    readonly state: FieldRef<"SolarSystem", 'String'>
    readonly utilityServiceTerritory: FieldRef<"SolarSystem", 'String'>
    readonly thirdPartyOwned: FieldRef<"SolarSystem", 'Boolean'>
    readonly installerName: FieldRef<"SolarSystem", 'String'>
    readonly selfInstalled: FieldRef<"SolarSystem", 'Boolean'>
    readonly createdAt: FieldRef<"SolarSystem", 'DateTime'>
    readonly updatedAt: FieldRef<"SolarSystem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SolarSystem findUnique
   */
  export type SolarSystemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SolarSystem
     */
    select?: SolarSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolarSystemInclude<ExtArgs> | null
    /**
     * Filter, which SolarSystem to fetch.
     */
    where: SolarSystemWhereUniqueInput
  }

  /**
   * SolarSystem findUniqueOrThrow
   */
  export type SolarSystemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SolarSystem
     */
    select?: SolarSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolarSystemInclude<ExtArgs> | null
    /**
     * Filter, which SolarSystem to fetch.
     */
    where: SolarSystemWhereUniqueInput
  }

  /**
   * SolarSystem findFirst
   */
  export type SolarSystemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SolarSystem
     */
    select?: SolarSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolarSystemInclude<ExtArgs> | null
    /**
     * Filter, which SolarSystem to fetch.
     */
    where?: SolarSystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SolarSystems to fetch.
     */
    orderBy?: SolarSystemOrderByWithRelationInput | SolarSystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SolarSystems.
     */
    cursor?: SolarSystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SolarSystems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SolarSystems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SolarSystems.
     */
    distinct?: SolarSystemScalarFieldEnum | SolarSystemScalarFieldEnum[]
  }

  /**
   * SolarSystem findFirstOrThrow
   */
  export type SolarSystemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SolarSystem
     */
    select?: SolarSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolarSystemInclude<ExtArgs> | null
    /**
     * Filter, which SolarSystem to fetch.
     */
    where?: SolarSystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SolarSystems to fetch.
     */
    orderBy?: SolarSystemOrderByWithRelationInput | SolarSystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SolarSystems.
     */
    cursor?: SolarSystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SolarSystems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SolarSystems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SolarSystems.
     */
    distinct?: SolarSystemScalarFieldEnum | SolarSystemScalarFieldEnum[]
  }

  /**
   * SolarSystem findMany
   */
  export type SolarSystemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SolarSystem
     */
    select?: SolarSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolarSystemInclude<ExtArgs> | null
    /**
     * Filter, which SolarSystems to fetch.
     */
    where?: SolarSystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SolarSystems to fetch.
     */
    orderBy?: SolarSystemOrderByWithRelationInput | SolarSystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SolarSystems.
     */
    cursor?: SolarSystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SolarSystems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SolarSystems.
     */
    skip?: number
    distinct?: SolarSystemScalarFieldEnum | SolarSystemScalarFieldEnum[]
  }

  /**
   * SolarSystem create
   */
  export type SolarSystemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SolarSystem
     */
    select?: SolarSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolarSystemInclude<ExtArgs> | null
    /**
     * The data needed to create a SolarSystem.
     */
    data: XOR<SolarSystemCreateInput, SolarSystemUncheckedCreateInput>
  }

  /**
   * SolarSystem createMany
   */
  export type SolarSystemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SolarSystems.
     */
    data: SolarSystemCreateManyInput | SolarSystemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SolarSystem createManyAndReturn
   */
  export type SolarSystemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SolarSystem
     */
    select?: SolarSystemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SolarSystems.
     */
    data: SolarSystemCreateManyInput | SolarSystemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SolarSystem update
   */
  export type SolarSystemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SolarSystem
     */
    select?: SolarSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolarSystemInclude<ExtArgs> | null
    /**
     * The data needed to update a SolarSystem.
     */
    data: XOR<SolarSystemUpdateInput, SolarSystemUncheckedUpdateInput>
    /**
     * Choose, which SolarSystem to update.
     */
    where: SolarSystemWhereUniqueInput
  }

  /**
   * SolarSystem updateMany
   */
  export type SolarSystemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SolarSystems.
     */
    data: XOR<SolarSystemUpdateManyMutationInput, SolarSystemUncheckedUpdateManyInput>
    /**
     * Filter which SolarSystems to update
     */
    where?: SolarSystemWhereInput
  }

  /**
   * SolarSystem upsert
   */
  export type SolarSystemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SolarSystem
     */
    select?: SolarSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolarSystemInclude<ExtArgs> | null
    /**
     * The filter to search for the SolarSystem to update in case it exists.
     */
    where: SolarSystemWhereUniqueInput
    /**
     * In case the SolarSystem found by the `where` argument doesn't exist, create a new SolarSystem with this data.
     */
    create: XOR<SolarSystemCreateInput, SolarSystemUncheckedCreateInput>
    /**
     * In case the SolarSystem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SolarSystemUpdateInput, SolarSystemUncheckedUpdateInput>
  }

  /**
   * SolarSystem delete
   */
  export type SolarSystemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SolarSystem
     */
    select?: SolarSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolarSystemInclude<ExtArgs> | null
    /**
     * Filter which SolarSystem to delete.
     */
    where: SolarSystemWhereUniqueInput
  }

  /**
   * SolarSystem deleteMany
   */
  export type SolarSystemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SolarSystems to delete
     */
    where?: SolarSystemWhereInput
  }

  /**
   * SolarSystem.moduleConfigurations
   */
  export type SolarSystem$moduleConfigurationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleConfiguration
     */
    select?: ModuleConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleConfigurationInclude<ExtArgs> | null
    where?: ModuleConfigurationWhereInput
    orderBy?: ModuleConfigurationOrderByWithRelationInput | ModuleConfigurationOrderByWithRelationInput[]
    cursor?: ModuleConfigurationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ModuleConfigurationScalarFieldEnum | ModuleConfigurationScalarFieldEnum[]
  }

  /**
   * SolarSystem.inverterConfigurations
   */
  export type SolarSystem$inverterConfigurationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InverterConfiguration
     */
    select?: InverterConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InverterConfigurationInclude<ExtArgs> | null
    where?: InverterConfigurationWhereInput
    orderBy?: InverterConfigurationOrderByWithRelationInput | InverterConfigurationOrderByWithRelationInput[]
    cursor?: InverterConfigurationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InverterConfigurationScalarFieldEnum | InverterConfigurationScalarFieldEnum[]
  }

  /**
   * SolarSystem.batteryConfigurations
   */
  export type SolarSystem$batteryConfigurationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryConfiguration
     */
    select?: BatteryConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryConfigurationInclude<ExtArgs> | null
    where?: BatteryConfigurationWhereInput
    orderBy?: BatteryConfigurationOrderByWithRelationInput | BatteryConfigurationOrderByWithRelationInput[]
    cursor?: BatteryConfigurationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BatteryConfigurationScalarFieldEnum | BatteryConfigurationScalarFieldEnum[]
  }

  /**
   * SolarSystem without action
   */
  export type SolarSystemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SolarSystem
     */
    select?: SolarSystemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolarSystemInclude<ExtArgs> | null
  }


  /**
   * Model ModuleConfiguration
   */

  export type AggregateModuleConfiguration = {
    _count: ModuleConfigurationCountAggregateOutputType | null
    _avg: ModuleConfigurationAvgAggregateOutputType | null
    _sum: ModuleConfigurationSumAggregateOutputType | null
    _min: ModuleConfigurationMinAggregateOutputType | null
    _max: ModuleConfigurationMaxAggregateOutputType | null
  }

  export type ModuleConfigurationAvgAggregateOutputType = {
    configurationNumber: number | null
    azimuth: number | null
    tilt: number | null
    moduleQuantity: number | null
    nameplateCapacity: number | null
    efficiency: number | null
  }

  export type ModuleConfigurationSumAggregateOutputType = {
    configurationNumber: number | null
    azimuth: number | null
    tilt: number | null
    moduleQuantity: number | null
    nameplateCapacity: number | null
    efficiency: number | null
  }

  export type ModuleConfigurationMinAggregateOutputType = {
    id: string | null
    solarSystemId: string | null
    configurationNumber: number | null
    azimuth: number | null
    tilt: number | null
    moduleManufacturer: string | null
    moduleModel: string | null
    moduleQuantity: number | null
    technologyType: string | null
    bipv: boolean | null
    bifacial: boolean | null
    nameplateCapacity: number | null
    efficiency: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ModuleConfigurationMaxAggregateOutputType = {
    id: string | null
    solarSystemId: string | null
    configurationNumber: number | null
    azimuth: number | null
    tilt: number | null
    moduleManufacturer: string | null
    moduleModel: string | null
    moduleQuantity: number | null
    technologyType: string | null
    bipv: boolean | null
    bifacial: boolean | null
    nameplateCapacity: number | null
    efficiency: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ModuleConfigurationCountAggregateOutputType = {
    id: number
    solarSystemId: number
    configurationNumber: number
    azimuth: number
    tilt: number
    moduleManufacturer: number
    moduleModel: number
    moduleQuantity: number
    technologyType: number
    bipv: number
    bifacial: number
    nameplateCapacity: number
    efficiency: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ModuleConfigurationAvgAggregateInputType = {
    configurationNumber?: true
    azimuth?: true
    tilt?: true
    moduleQuantity?: true
    nameplateCapacity?: true
    efficiency?: true
  }

  export type ModuleConfigurationSumAggregateInputType = {
    configurationNumber?: true
    azimuth?: true
    tilt?: true
    moduleQuantity?: true
    nameplateCapacity?: true
    efficiency?: true
  }

  export type ModuleConfigurationMinAggregateInputType = {
    id?: true
    solarSystemId?: true
    configurationNumber?: true
    azimuth?: true
    tilt?: true
    moduleManufacturer?: true
    moduleModel?: true
    moduleQuantity?: true
    technologyType?: true
    bipv?: true
    bifacial?: true
    nameplateCapacity?: true
    efficiency?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ModuleConfigurationMaxAggregateInputType = {
    id?: true
    solarSystemId?: true
    configurationNumber?: true
    azimuth?: true
    tilt?: true
    moduleManufacturer?: true
    moduleModel?: true
    moduleQuantity?: true
    technologyType?: true
    bipv?: true
    bifacial?: true
    nameplateCapacity?: true
    efficiency?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ModuleConfigurationCountAggregateInputType = {
    id?: true
    solarSystemId?: true
    configurationNumber?: true
    azimuth?: true
    tilt?: true
    moduleManufacturer?: true
    moduleModel?: true
    moduleQuantity?: true
    technologyType?: true
    bipv?: true
    bifacial?: true
    nameplateCapacity?: true
    efficiency?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ModuleConfigurationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ModuleConfiguration to aggregate.
     */
    where?: ModuleConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModuleConfigurations to fetch.
     */
    orderBy?: ModuleConfigurationOrderByWithRelationInput | ModuleConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ModuleConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModuleConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModuleConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ModuleConfigurations
    **/
    _count?: true | ModuleConfigurationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ModuleConfigurationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ModuleConfigurationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ModuleConfigurationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ModuleConfigurationMaxAggregateInputType
  }

  export type GetModuleConfigurationAggregateType<T extends ModuleConfigurationAggregateArgs> = {
        [P in keyof T & keyof AggregateModuleConfiguration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateModuleConfiguration[P]>
      : GetScalarType<T[P], AggregateModuleConfiguration[P]>
  }




  export type ModuleConfigurationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModuleConfigurationWhereInput
    orderBy?: ModuleConfigurationOrderByWithAggregationInput | ModuleConfigurationOrderByWithAggregationInput[]
    by: ModuleConfigurationScalarFieldEnum[] | ModuleConfigurationScalarFieldEnum
    having?: ModuleConfigurationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ModuleConfigurationCountAggregateInputType | true
    _avg?: ModuleConfigurationAvgAggregateInputType
    _sum?: ModuleConfigurationSumAggregateInputType
    _min?: ModuleConfigurationMinAggregateInputType
    _max?: ModuleConfigurationMaxAggregateInputType
  }

  export type ModuleConfigurationGroupByOutputType = {
    id: string
    solarSystemId: string
    configurationNumber: number
    azimuth: number | null
    tilt: number | null
    moduleManufacturer: string | null
    moduleModel: string | null
    moduleQuantity: number | null
    technologyType: string | null
    bipv: boolean | null
    bifacial: boolean | null
    nameplateCapacity: number | null
    efficiency: number | null
    createdAt: Date
    updatedAt: Date
    _count: ModuleConfigurationCountAggregateOutputType | null
    _avg: ModuleConfigurationAvgAggregateOutputType | null
    _sum: ModuleConfigurationSumAggregateOutputType | null
    _min: ModuleConfigurationMinAggregateOutputType | null
    _max: ModuleConfigurationMaxAggregateOutputType | null
  }

  type GetModuleConfigurationGroupByPayload<T extends ModuleConfigurationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ModuleConfigurationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ModuleConfigurationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ModuleConfigurationGroupByOutputType[P]>
            : GetScalarType<T[P], ModuleConfigurationGroupByOutputType[P]>
        }
      >
    >


  export type ModuleConfigurationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    solarSystemId?: boolean
    configurationNumber?: boolean
    azimuth?: boolean
    tilt?: boolean
    moduleManufacturer?: boolean
    moduleModel?: boolean
    moduleQuantity?: boolean
    technologyType?: boolean
    bipv?: boolean
    bifacial?: boolean
    nameplateCapacity?: boolean
    efficiency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    solarSystem?: boolean | SolarSystemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["moduleConfiguration"]>

  export type ModuleConfigurationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    solarSystemId?: boolean
    configurationNumber?: boolean
    azimuth?: boolean
    tilt?: boolean
    moduleManufacturer?: boolean
    moduleModel?: boolean
    moduleQuantity?: boolean
    technologyType?: boolean
    bipv?: boolean
    bifacial?: boolean
    nameplateCapacity?: boolean
    efficiency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    solarSystem?: boolean | SolarSystemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["moduleConfiguration"]>

  export type ModuleConfigurationSelectScalar = {
    id?: boolean
    solarSystemId?: boolean
    configurationNumber?: boolean
    azimuth?: boolean
    tilt?: boolean
    moduleManufacturer?: boolean
    moduleModel?: boolean
    moduleQuantity?: boolean
    technologyType?: boolean
    bipv?: boolean
    bifacial?: boolean
    nameplateCapacity?: boolean
    efficiency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ModuleConfigurationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    solarSystem?: boolean | SolarSystemDefaultArgs<ExtArgs>
  }
  export type ModuleConfigurationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    solarSystem?: boolean | SolarSystemDefaultArgs<ExtArgs>
  }

  export type $ModuleConfigurationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ModuleConfiguration"
    objects: {
      solarSystem: Prisma.$SolarSystemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      solarSystemId: string
      configurationNumber: number
      azimuth: number | null
      tilt: number | null
      moduleManufacturer: string | null
      moduleModel: string | null
      moduleQuantity: number | null
      technologyType: string | null
      bipv: boolean | null
      bifacial: boolean | null
      nameplateCapacity: number | null
      efficiency: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["moduleConfiguration"]>
    composites: {}
  }

  type ModuleConfigurationGetPayload<S extends boolean | null | undefined | ModuleConfigurationDefaultArgs> = $Result.GetResult<Prisma.$ModuleConfigurationPayload, S>

  type ModuleConfigurationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ModuleConfigurationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ModuleConfigurationCountAggregateInputType | true
    }

  export interface ModuleConfigurationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ModuleConfiguration'], meta: { name: 'ModuleConfiguration' } }
    /**
     * Find zero or one ModuleConfiguration that matches the filter.
     * @param {ModuleConfigurationFindUniqueArgs} args - Arguments to find a ModuleConfiguration
     * @example
     * // Get one ModuleConfiguration
     * const moduleConfiguration = await prisma.moduleConfiguration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ModuleConfigurationFindUniqueArgs>(args: SelectSubset<T, ModuleConfigurationFindUniqueArgs<ExtArgs>>): Prisma__ModuleConfigurationClient<$Result.GetResult<Prisma.$ModuleConfigurationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ModuleConfiguration that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ModuleConfigurationFindUniqueOrThrowArgs} args - Arguments to find a ModuleConfiguration
     * @example
     * // Get one ModuleConfiguration
     * const moduleConfiguration = await prisma.moduleConfiguration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ModuleConfigurationFindUniqueOrThrowArgs>(args: SelectSubset<T, ModuleConfigurationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ModuleConfigurationClient<$Result.GetResult<Prisma.$ModuleConfigurationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ModuleConfiguration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleConfigurationFindFirstArgs} args - Arguments to find a ModuleConfiguration
     * @example
     * // Get one ModuleConfiguration
     * const moduleConfiguration = await prisma.moduleConfiguration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ModuleConfigurationFindFirstArgs>(args?: SelectSubset<T, ModuleConfigurationFindFirstArgs<ExtArgs>>): Prisma__ModuleConfigurationClient<$Result.GetResult<Prisma.$ModuleConfigurationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ModuleConfiguration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleConfigurationFindFirstOrThrowArgs} args - Arguments to find a ModuleConfiguration
     * @example
     * // Get one ModuleConfiguration
     * const moduleConfiguration = await prisma.moduleConfiguration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ModuleConfigurationFindFirstOrThrowArgs>(args?: SelectSubset<T, ModuleConfigurationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ModuleConfigurationClient<$Result.GetResult<Prisma.$ModuleConfigurationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ModuleConfigurations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleConfigurationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ModuleConfigurations
     * const moduleConfigurations = await prisma.moduleConfiguration.findMany()
     * 
     * // Get first 10 ModuleConfigurations
     * const moduleConfigurations = await prisma.moduleConfiguration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const moduleConfigurationWithIdOnly = await prisma.moduleConfiguration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ModuleConfigurationFindManyArgs>(args?: SelectSubset<T, ModuleConfigurationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModuleConfigurationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ModuleConfiguration.
     * @param {ModuleConfigurationCreateArgs} args - Arguments to create a ModuleConfiguration.
     * @example
     * // Create one ModuleConfiguration
     * const ModuleConfiguration = await prisma.moduleConfiguration.create({
     *   data: {
     *     // ... data to create a ModuleConfiguration
     *   }
     * })
     * 
     */
    create<T extends ModuleConfigurationCreateArgs>(args: SelectSubset<T, ModuleConfigurationCreateArgs<ExtArgs>>): Prisma__ModuleConfigurationClient<$Result.GetResult<Prisma.$ModuleConfigurationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ModuleConfigurations.
     * @param {ModuleConfigurationCreateManyArgs} args - Arguments to create many ModuleConfigurations.
     * @example
     * // Create many ModuleConfigurations
     * const moduleConfiguration = await prisma.moduleConfiguration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ModuleConfigurationCreateManyArgs>(args?: SelectSubset<T, ModuleConfigurationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ModuleConfigurations and returns the data saved in the database.
     * @param {ModuleConfigurationCreateManyAndReturnArgs} args - Arguments to create many ModuleConfigurations.
     * @example
     * // Create many ModuleConfigurations
     * const moduleConfiguration = await prisma.moduleConfiguration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ModuleConfigurations and only return the `id`
     * const moduleConfigurationWithIdOnly = await prisma.moduleConfiguration.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ModuleConfigurationCreateManyAndReturnArgs>(args?: SelectSubset<T, ModuleConfigurationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModuleConfigurationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ModuleConfiguration.
     * @param {ModuleConfigurationDeleteArgs} args - Arguments to delete one ModuleConfiguration.
     * @example
     * // Delete one ModuleConfiguration
     * const ModuleConfiguration = await prisma.moduleConfiguration.delete({
     *   where: {
     *     // ... filter to delete one ModuleConfiguration
     *   }
     * })
     * 
     */
    delete<T extends ModuleConfigurationDeleteArgs>(args: SelectSubset<T, ModuleConfigurationDeleteArgs<ExtArgs>>): Prisma__ModuleConfigurationClient<$Result.GetResult<Prisma.$ModuleConfigurationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ModuleConfiguration.
     * @param {ModuleConfigurationUpdateArgs} args - Arguments to update one ModuleConfiguration.
     * @example
     * // Update one ModuleConfiguration
     * const moduleConfiguration = await prisma.moduleConfiguration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ModuleConfigurationUpdateArgs>(args: SelectSubset<T, ModuleConfigurationUpdateArgs<ExtArgs>>): Prisma__ModuleConfigurationClient<$Result.GetResult<Prisma.$ModuleConfigurationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ModuleConfigurations.
     * @param {ModuleConfigurationDeleteManyArgs} args - Arguments to filter ModuleConfigurations to delete.
     * @example
     * // Delete a few ModuleConfigurations
     * const { count } = await prisma.moduleConfiguration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ModuleConfigurationDeleteManyArgs>(args?: SelectSubset<T, ModuleConfigurationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ModuleConfigurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleConfigurationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ModuleConfigurations
     * const moduleConfiguration = await prisma.moduleConfiguration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ModuleConfigurationUpdateManyArgs>(args: SelectSubset<T, ModuleConfigurationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ModuleConfiguration.
     * @param {ModuleConfigurationUpsertArgs} args - Arguments to update or create a ModuleConfiguration.
     * @example
     * // Update or create a ModuleConfiguration
     * const moduleConfiguration = await prisma.moduleConfiguration.upsert({
     *   create: {
     *     // ... data to create a ModuleConfiguration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ModuleConfiguration we want to update
     *   }
     * })
     */
    upsert<T extends ModuleConfigurationUpsertArgs>(args: SelectSubset<T, ModuleConfigurationUpsertArgs<ExtArgs>>): Prisma__ModuleConfigurationClient<$Result.GetResult<Prisma.$ModuleConfigurationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ModuleConfigurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleConfigurationCountArgs} args - Arguments to filter ModuleConfigurations to count.
     * @example
     * // Count the number of ModuleConfigurations
     * const count = await prisma.moduleConfiguration.count({
     *   where: {
     *     // ... the filter for the ModuleConfigurations we want to count
     *   }
     * })
    **/
    count<T extends ModuleConfigurationCountArgs>(
      args?: Subset<T, ModuleConfigurationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ModuleConfigurationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ModuleConfiguration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleConfigurationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ModuleConfigurationAggregateArgs>(args: Subset<T, ModuleConfigurationAggregateArgs>): Prisma.PrismaPromise<GetModuleConfigurationAggregateType<T>>

    /**
     * Group by ModuleConfiguration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleConfigurationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ModuleConfigurationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ModuleConfigurationGroupByArgs['orderBy'] }
        : { orderBy?: ModuleConfigurationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ModuleConfigurationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModuleConfigurationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ModuleConfiguration model
   */
  readonly fields: ModuleConfigurationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ModuleConfiguration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ModuleConfigurationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    solarSystem<T extends SolarSystemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SolarSystemDefaultArgs<ExtArgs>>): Prisma__SolarSystemClient<$Result.GetResult<Prisma.$SolarSystemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ModuleConfiguration model
   */ 
  interface ModuleConfigurationFieldRefs {
    readonly id: FieldRef<"ModuleConfiguration", 'String'>
    readonly solarSystemId: FieldRef<"ModuleConfiguration", 'String'>
    readonly configurationNumber: FieldRef<"ModuleConfiguration", 'Int'>
    readonly azimuth: FieldRef<"ModuleConfiguration", 'Float'>
    readonly tilt: FieldRef<"ModuleConfiguration", 'Float'>
    readonly moduleManufacturer: FieldRef<"ModuleConfiguration", 'String'>
    readonly moduleModel: FieldRef<"ModuleConfiguration", 'String'>
    readonly moduleQuantity: FieldRef<"ModuleConfiguration", 'Int'>
    readonly technologyType: FieldRef<"ModuleConfiguration", 'String'>
    readonly bipv: FieldRef<"ModuleConfiguration", 'Boolean'>
    readonly bifacial: FieldRef<"ModuleConfiguration", 'Boolean'>
    readonly nameplateCapacity: FieldRef<"ModuleConfiguration", 'Float'>
    readonly efficiency: FieldRef<"ModuleConfiguration", 'Float'>
    readonly createdAt: FieldRef<"ModuleConfiguration", 'DateTime'>
    readonly updatedAt: FieldRef<"ModuleConfiguration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ModuleConfiguration findUnique
   */
  export type ModuleConfigurationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleConfiguration
     */
    select?: ModuleConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which ModuleConfiguration to fetch.
     */
    where: ModuleConfigurationWhereUniqueInput
  }

  /**
   * ModuleConfiguration findUniqueOrThrow
   */
  export type ModuleConfigurationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleConfiguration
     */
    select?: ModuleConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which ModuleConfiguration to fetch.
     */
    where: ModuleConfigurationWhereUniqueInput
  }

  /**
   * ModuleConfiguration findFirst
   */
  export type ModuleConfigurationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleConfiguration
     */
    select?: ModuleConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which ModuleConfiguration to fetch.
     */
    where?: ModuleConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModuleConfigurations to fetch.
     */
    orderBy?: ModuleConfigurationOrderByWithRelationInput | ModuleConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ModuleConfigurations.
     */
    cursor?: ModuleConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModuleConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModuleConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ModuleConfigurations.
     */
    distinct?: ModuleConfigurationScalarFieldEnum | ModuleConfigurationScalarFieldEnum[]
  }

  /**
   * ModuleConfiguration findFirstOrThrow
   */
  export type ModuleConfigurationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleConfiguration
     */
    select?: ModuleConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which ModuleConfiguration to fetch.
     */
    where?: ModuleConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModuleConfigurations to fetch.
     */
    orderBy?: ModuleConfigurationOrderByWithRelationInput | ModuleConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ModuleConfigurations.
     */
    cursor?: ModuleConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModuleConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModuleConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ModuleConfigurations.
     */
    distinct?: ModuleConfigurationScalarFieldEnum | ModuleConfigurationScalarFieldEnum[]
  }

  /**
   * ModuleConfiguration findMany
   */
  export type ModuleConfigurationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleConfiguration
     */
    select?: ModuleConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which ModuleConfigurations to fetch.
     */
    where?: ModuleConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModuleConfigurations to fetch.
     */
    orderBy?: ModuleConfigurationOrderByWithRelationInput | ModuleConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ModuleConfigurations.
     */
    cursor?: ModuleConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModuleConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModuleConfigurations.
     */
    skip?: number
    distinct?: ModuleConfigurationScalarFieldEnum | ModuleConfigurationScalarFieldEnum[]
  }

  /**
   * ModuleConfiguration create
   */
  export type ModuleConfigurationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleConfiguration
     */
    select?: ModuleConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleConfigurationInclude<ExtArgs> | null
    /**
     * The data needed to create a ModuleConfiguration.
     */
    data: XOR<ModuleConfigurationCreateInput, ModuleConfigurationUncheckedCreateInput>
  }

  /**
   * ModuleConfiguration createMany
   */
  export type ModuleConfigurationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ModuleConfigurations.
     */
    data: ModuleConfigurationCreateManyInput | ModuleConfigurationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ModuleConfiguration createManyAndReturn
   */
  export type ModuleConfigurationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleConfiguration
     */
    select?: ModuleConfigurationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ModuleConfigurations.
     */
    data: ModuleConfigurationCreateManyInput | ModuleConfigurationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleConfigurationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ModuleConfiguration update
   */
  export type ModuleConfigurationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleConfiguration
     */
    select?: ModuleConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleConfigurationInclude<ExtArgs> | null
    /**
     * The data needed to update a ModuleConfiguration.
     */
    data: XOR<ModuleConfigurationUpdateInput, ModuleConfigurationUncheckedUpdateInput>
    /**
     * Choose, which ModuleConfiguration to update.
     */
    where: ModuleConfigurationWhereUniqueInput
  }

  /**
   * ModuleConfiguration updateMany
   */
  export type ModuleConfigurationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ModuleConfigurations.
     */
    data: XOR<ModuleConfigurationUpdateManyMutationInput, ModuleConfigurationUncheckedUpdateManyInput>
    /**
     * Filter which ModuleConfigurations to update
     */
    where?: ModuleConfigurationWhereInput
  }

  /**
   * ModuleConfiguration upsert
   */
  export type ModuleConfigurationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleConfiguration
     */
    select?: ModuleConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleConfigurationInclude<ExtArgs> | null
    /**
     * The filter to search for the ModuleConfiguration to update in case it exists.
     */
    where: ModuleConfigurationWhereUniqueInput
    /**
     * In case the ModuleConfiguration found by the `where` argument doesn't exist, create a new ModuleConfiguration with this data.
     */
    create: XOR<ModuleConfigurationCreateInput, ModuleConfigurationUncheckedCreateInput>
    /**
     * In case the ModuleConfiguration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ModuleConfigurationUpdateInput, ModuleConfigurationUncheckedUpdateInput>
  }

  /**
   * ModuleConfiguration delete
   */
  export type ModuleConfigurationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleConfiguration
     */
    select?: ModuleConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleConfigurationInclude<ExtArgs> | null
    /**
     * Filter which ModuleConfiguration to delete.
     */
    where: ModuleConfigurationWhereUniqueInput
  }

  /**
   * ModuleConfiguration deleteMany
   */
  export type ModuleConfigurationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ModuleConfigurations to delete
     */
    where?: ModuleConfigurationWhereInput
  }

  /**
   * ModuleConfiguration without action
   */
  export type ModuleConfigurationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModuleConfiguration
     */
    select?: ModuleConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModuleConfigurationInclude<ExtArgs> | null
  }


  /**
   * Model InverterConfiguration
   */

  export type AggregateInverterConfiguration = {
    _count: InverterConfigurationCountAggregateOutputType | null
    _avg: InverterConfigurationAvgAggregateOutputType | null
    _sum: InverterConfigurationSumAggregateOutputType | null
    _min: InverterConfigurationMinAggregateOutputType | null
    _max: InverterConfigurationMaxAggregateOutputType | null
  }

  export type InverterConfigurationAvgAggregateOutputType = {
    configurationNumber: number | null
    inverterQuantity: number | null
    outputCapacity: number | null
  }

  export type InverterConfigurationSumAggregateOutputType = {
    configurationNumber: number | null
    inverterQuantity: number | null
    outputCapacity: number | null
  }

  export type InverterConfigurationMinAggregateOutputType = {
    id: string | null
    solarSystemId: string | null
    configurationNumber: number | null
    inverterManufacturer: string | null
    inverterModel: string | null
    inverterQuantity: number | null
    microInverter: boolean | null
    builtInMeter: boolean | null
    outputCapacity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InverterConfigurationMaxAggregateOutputType = {
    id: string | null
    solarSystemId: string | null
    configurationNumber: number | null
    inverterManufacturer: string | null
    inverterModel: string | null
    inverterQuantity: number | null
    microInverter: boolean | null
    builtInMeter: boolean | null
    outputCapacity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InverterConfigurationCountAggregateOutputType = {
    id: number
    solarSystemId: number
    configurationNumber: number
    inverterManufacturer: number
    inverterModel: number
    inverterQuantity: number
    microInverter: number
    builtInMeter: number
    outputCapacity: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InverterConfigurationAvgAggregateInputType = {
    configurationNumber?: true
    inverterQuantity?: true
    outputCapacity?: true
  }

  export type InverterConfigurationSumAggregateInputType = {
    configurationNumber?: true
    inverterQuantity?: true
    outputCapacity?: true
  }

  export type InverterConfigurationMinAggregateInputType = {
    id?: true
    solarSystemId?: true
    configurationNumber?: true
    inverterManufacturer?: true
    inverterModel?: true
    inverterQuantity?: true
    microInverter?: true
    builtInMeter?: true
    outputCapacity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InverterConfigurationMaxAggregateInputType = {
    id?: true
    solarSystemId?: true
    configurationNumber?: true
    inverterManufacturer?: true
    inverterModel?: true
    inverterQuantity?: true
    microInverter?: true
    builtInMeter?: true
    outputCapacity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InverterConfigurationCountAggregateInputType = {
    id?: true
    solarSystemId?: true
    configurationNumber?: true
    inverterManufacturer?: true
    inverterModel?: true
    inverterQuantity?: true
    microInverter?: true
    builtInMeter?: true
    outputCapacity?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InverterConfigurationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InverterConfiguration to aggregate.
     */
    where?: InverterConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InverterConfigurations to fetch.
     */
    orderBy?: InverterConfigurationOrderByWithRelationInput | InverterConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InverterConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InverterConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InverterConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InverterConfigurations
    **/
    _count?: true | InverterConfigurationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InverterConfigurationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InverterConfigurationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InverterConfigurationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InverterConfigurationMaxAggregateInputType
  }

  export type GetInverterConfigurationAggregateType<T extends InverterConfigurationAggregateArgs> = {
        [P in keyof T & keyof AggregateInverterConfiguration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInverterConfiguration[P]>
      : GetScalarType<T[P], AggregateInverterConfiguration[P]>
  }




  export type InverterConfigurationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InverterConfigurationWhereInput
    orderBy?: InverterConfigurationOrderByWithAggregationInput | InverterConfigurationOrderByWithAggregationInput[]
    by: InverterConfigurationScalarFieldEnum[] | InverterConfigurationScalarFieldEnum
    having?: InverterConfigurationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InverterConfigurationCountAggregateInputType | true
    _avg?: InverterConfigurationAvgAggregateInputType
    _sum?: InverterConfigurationSumAggregateInputType
    _min?: InverterConfigurationMinAggregateInputType
    _max?: InverterConfigurationMaxAggregateInputType
  }

  export type InverterConfigurationGroupByOutputType = {
    id: string
    solarSystemId: string
    configurationNumber: number
    inverterManufacturer: string | null
    inverterModel: string | null
    inverterQuantity: number | null
    microInverter: boolean | null
    builtInMeter: boolean | null
    outputCapacity: number | null
    createdAt: Date
    updatedAt: Date
    _count: InverterConfigurationCountAggregateOutputType | null
    _avg: InverterConfigurationAvgAggregateOutputType | null
    _sum: InverterConfigurationSumAggregateOutputType | null
    _min: InverterConfigurationMinAggregateOutputType | null
    _max: InverterConfigurationMaxAggregateOutputType | null
  }

  type GetInverterConfigurationGroupByPayload<T extends InverterConfigurationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InverterConfigurationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InverterConfigurationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InverterConfigurationGroupByOutputType[P]>
            : GetScalarType<T[P], InverterConfigurationGroupByOutputType[P]>
        }
      >
    >


  export type InverterConfigurationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    solarSystemId?: boolean
    configurationNumber?: boolean
    inverterManufacturer?: boolean
    inverterModel?: boolean
    inverterQuantity?: boolean
    microInverter?: boolean
    builtInMeter?: boolean
    outputCapacity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    solarSystem?: boolean | SolarSystemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inverterConfiguration"]>

  export type InverterConfigurationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    solarSystemId?: boolean
    configurationNumber?: boolean
    inverterManufacturer?: boolean
    inverterModel?: boolean
    inverterQuantity?: boolean
    microInverter?: boolean
    builtInMeter?: boolean
    outputCapacity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    solarSystem?: boolean | SolarSystemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inverterConfiguration"]>

  export type InverterConfigurationSelectScalar = {
    id?: boolean
    solarSystemId?: boolean
    configurationNumber?: boolean
    inverterManufacturer?: boolean
    inverterModel?: boolean
    inverterQuantity?: boolean
    microInverter?: boolean
    builtInMeter?: boolean
    outputCapacity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InverterConfigurationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    solarSystem?: boolean | SolarSystemDefaultArgs<ExtArgs>
  }
  export type InverterConfigurationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    solarSystem?: boolean | SolarSystemDefaultArgs<ExtArgs>
  }

  export type $InverterConfigurationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InverterConfiguration"
    objects: {
      solarSystem: Prisma.$SolarSystemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      solarSystemId: string
      configurationNumber: number
      inverterManufacturer: string | null
      inverterModel: string | null
      inverterQuantity: number | null
      microInverter: boolean | null
      builtInMeter: boolean | null
      outputCapacity: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inverterConfiguration"]>
    composites: {}
  }

  type InverterConfigurationGetPayload<S extends boolean | null | undefined | InverterConfigurationDefaultArgs> = $Result.GetResult<Prisma.$InverterConfigurationPayload, S>

  type InverterConfigurationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InverterConfigurationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InverterConfigurationCountAggregateInputType | true
    }

  export interface InverterConfigurationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InverterConfiguration'], meta: { name: 'InverterConfiguration' } }
    /**
     * Find zero or one InverterConfiguration that matches the filter.
     * @param {InverterConfigurationFindUniqueArgs} args - Arguments to find a InverterConfiguration
     * @example
     * // Get one InverterConfiguration
     * const inverterConfiguration = await prisma.inverterConfiguration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InverterConfigurationFindUniqueArgs>(args: SelectSubset<T, InverterConfigurationFindUniqueArgs<ExtArgs>>): Prisma__InverterConfigurationClient<$Result.GetResult<Prisma.$InverterConfigurationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InverterConfiguration that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InverterConfigurationFindUniqueOrThrowArgs} args - Arguments to find a InverterConfiguration
     * @example
     * // Get one InverterConfiguration
     * const inverterConfiguration = await prisma.inverterConfiguration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InverterConfigurationFindUniqueOrThrowArgs>(args: SelectSubset<T, InverterConfigurationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InverterConfigurationClient<$Result.GetResult<Prisma.$InverterConfigurationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InverterConfiguration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InverterConfigurationFindFirstArgs} args - Arguments to find a InverterConfiguration
     * @example
     * // Get one InverterConfiguration
     * const inverterConfiguration = await prisma.inverterConfiguration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InverterConfigurationFindFirstArgs>(args?: SelectSubset<T, InverterConfigurationFindFirstArgs<ExtArgs>>): Prisma__InverterConfigurationClient<$Result.GetResult<Prisma.$InverterConfigurationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InverterConfiguration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InverterConfigurationFindFirstOrThrowArgs} args - Arguments to find a InverterConfiguration
     * @example
     * // Get one InverterConfiguration
     * const inverterConfiguration = await prisma.inverterConfiguration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InverterConfigurationFindFirstOrThrowArgs>(args?: SelectSubset<T, InverterConfigurationFindFirstOrThrowArgs<ExtArgs>>): Prisma__InverterConfigurationClient<$Result.GetResult<Prisma.$InverterConfigurationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InverterConfigurations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InverterConfigurationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InverterConfigurations
     * const inverterConfigurations = await prisma.inverterConfiguration.findMany()
     * 
     * // Get first 10 InverterConfigurations
     * const inverterConfigurations = await prisma.inverterConfiguration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inverterConfigurationWithIdOnly = await prisma.inverterConfiguration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InverterConfigurationFindManyArgs>(args?: SelectSubset<T, InverterConfigurationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InverterConfigurationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InverterConfiguration.
     * @param {InverterConfigurationCreateArgs} args - Arguments to create a InverterConfiguration.
     * @example
     * // Create one InverterConfiguration
     * const InverterConfiguration = await prisma.inverterConfiguration.create({
     *   data: {
     *     // ... data to create a InverterConfiguration
     *   }
     * })
     * 
     */
    create<T extends InverterConfigurationCreateArgs>(args: SelectSubset<T, InverterConfigurationCreateArgs<ExtArgs>>): Prisma__InverterConfigurationClient<$Result.GetResult<Prisma.$InverterConfigurationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InverterConfigurations.
     * @param {InverterConfigurationCreateManyArgs} args - Arguments to create many InverterConfigurations.
     * @example
     * // Create many InverterConfigurations
     * const inverterConfiguration = await prisma.inverterConfiguration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InverterConfigurationCreateManyArgs>(args?: SelectSubset<T, InverterConfigurationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InverterConfigurations and returns the data saved in the database.
     * @param {InverterConfigurationCreateManyAndReturnArgs} args - Arguments to create many InverterConfigurations.
     * @example
     * // Create many InverterConfigurations
     * const inverterConfiguration = await prisma.inverterConfiguration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InverterConfigurations and only return the `id`
     * const inverterConfigurationWithIdOnly = await prisma.inverterConfiguration.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InverterConfigurationCreateManyAndReturnArgs>(args?: SelectSubset<T, InverterConfigurationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InverterConfigurationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a InverterConfiguration.
     * @param {InverterConfigurationDeleteArgs} args - Arguments to delete one InverterConfiguration.
     * @example
     * // Delete one InverterConfiguration
     * const InverterConfiguration = await prisma.inverterConfiguration.delete({
     *   where: {
     *     // ... filter to delete one InverterConfiguration
     *   }
     * })
     * 
     */
    delete<T extends InverterConfigurationDeleteArgs>(args: SelectSubset<T, InverterConfigurationDeleteArgs<ExtArgs>>): Prisma__InverterConfigurationClient<$Result.GetResult<Prisma.$InverterConfigurationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InverterConfiguration.
     * @param {InverterConfigurationUpdateArgs} args - Arguments to update one InverterConfiguration.
     * @example
     * // Update one InverterConfiguration
     * const inverterConfiguration = await prisma.inverterConfiguration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InverterConfigurationUpdateArgs>(args: SelectSubset<T, InverterConfigurationUpdateArgs<ExtArgs>>): Prisma__InverterConfigurationClient<$Result.GetResult<Prisma.$InverterConfigurationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InverterConfigurations.
     * @param {InverterConfigurationDeleteManyArgs} args - Arguments to filter InverterConfigurations to delete.
     * @example
     * // Delete a few InverterConfigurations
     * const { count } = await prisma.inverterConfiguration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InverterConfigurationDeleteManyArgs>(args?: SelectSubset<T, InverterConfigurationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InverterConfigurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InverterConfigurationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InverterConfigurations
     * const inverterConfiguration = await prisma.inverterConfiguration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InverterConfigurationUpdateManyArgs>(args: SelectSubset<T, InverterConfigurationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InverterConfiguration.
     * @param {InverterConfigurationUpsertArgs} args - Arguments to update or create a InverterConfiguration.
     * @example
     * // Update or create a InverterConfiguration
     * const inverterConfiguration = await prisma.inverterConfiguration.upsert({
     *   create: {
     *     // ... data to create a InverterConfiguration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InverterConfiguration we want to update
     *   }
     * })
     */
    upsert<T extends InverterConfigurationUpsertArgs>(args: SelectSubset<T, InverterConfigurationUpsertArgs<ExtArgs>>): Prisma__InverterConfigurationClient<$Result.GetResult<Prisma.$InverterConfigurationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InverterConfigurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InverterConfigurationCountArgs} args - Arguments to filter InverterConfigurations to count.
     * @example
     * // Count the number of InverterConfigurations
     * const count = await prisma.inverterConfiguration.count({
     *   where: {
     *     // ... the filter for the InverterConfigurations we want to count
     *   }
     * })
    **/
    count<T extends InverterConfigurationCountArgs>(
      args?: Subset<T, InverterConfigurationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InverterConfigurationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InverterConfiguration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InverterConfigurationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InverterConfigurationAggregateArgs>(args: Subset<T, InverterConfigurationAggregateArgs>): Prisma.PrismaPromise<GetInverterConfigurationAggregateType<T>>

    /**
     * Group by InverterConfiguration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InverterConfigurationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InverterConfigurationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InverterConfigurationGroupByArgs['orderBy'] }
        : { orderBy?: InverterConfigurationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InverterConfigurationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInverterConfigurationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InverterConfiguration model
   */
  readonly fields: InverterConfigurationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InverterConfiguration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InverterConfigurationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    solarSystem<T extends SolarSystemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SolarSystemDefaultArgs<ExtArgs>>): Prisma__SolarSystemClient<$Result.GetResult<Prisma.$SolarSystemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InverterConfiguration model
   */ 
  interface InverterConfigurationFieldRefs {
    readonly id: FieldRef<"InverterConfiguration", 'String'>
    readonly solarSystemId: FieldRef<"InverterConfiguration", 'String'>
    readonly configurationNumber: FieldRef<"InverterConfiguration", 'Int'>
    readonly inverterManufacturer: FieldRef<"InverterConfiguration", 'String'>
    readonly inverterModel: FieldRef<"InverterConfiguration", 'String'>
    readonly inverterQuantity: FieldRef<"InverterConfiguration", 'Int'>
    readonly microInverter: FieldRef<"InverterConfiguration", 'Boolean'>
    readonly builtInMeter: FieldRef<"InverterConfiguration", 'Boolean'>
    readonly outputCapacity: FieldRef<"InverterConfiguration", 'Float'>
    readonly createdAt: FieldRef<"InverterConfiguration", 'DateTime'>
    readonly updatedAt: FieldRef<"InverterConfiguration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InverterConfiguration findUnique
   */
  export type InverterConfigurationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InverterConfiguration
     */
    select?: InverterConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InverterConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which InverterConfiguration to fetch.
     */
    where: InverterConfigurationWhereUniqueInput
  }

  /**
   * InverterConfiguration findUniqueOrThrow
   */
  export type InverterConfigurationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InverterConfiguration
     */
    select?: InverterConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InverterConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which InverterConfiguration to fetch.
     */
    where: InverterConfigurationWhereUniqueInput
  }

  /**
   * InverterConfiguration findFirst
   */
  export type InverterConfigurationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InverterConfiguration
     */
    select?: InverterConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InverterConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which InverterConfiguration to fetch.
     */
    where?: InverterConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InverterConfigurations to fetch.
     */
    orderBy?: InverterConfigurationOrderByWithRelationInput | InverterConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InverterConfigurations.
     */
    cursor?: InverterConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InverterConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InverterConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InverterConfigurations.
     */
    distinct?: InverterConfigurationScalarFieldEnum | InverterConfigurationScalarFieldEnum[]
  }

  /**
   * InverterConfiguration findFirstOrThrow
   */
  export type InverterConfigurationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InverterConfiguration
     */
    select?: InverterConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InverterConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which InverterConfiguration to fetch.
     */
    where?: InverterConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InverterConfigurations to fetch.
     */
    orderBy?: InverterConfigurationOrderByWithRelationInput | InverterConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InverterConfigurations.
     */
    cursor?: InverterConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InverterConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InverterConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InverterConfigurations.
     */
    distinct?: InverterConfigurationScalarFieldEnum | InverterConfigurationScalarFieldEnum[]
  }

  /**
   * InverterConfiguration findMany
   */
  export type InverterConfigurationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InverterConfiguration
     */
    select?: InverterConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InverterConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which InverterConfigurations to fetch.
     */
    where?: InverterConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InverterConfigurations to fetch.
     */
    orderBy?: InverterConfigurationOrderByWithRelationInput | InverterConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InverterConfigurations.
     */
    cursor?: InverterConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InverterConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InverterConfigurations.
     */
    skip?: number
    distinct?: InverterConfigurationScalarFieldEnum | InverterConfigurationScalarFieldEnum[]
  }

  /**
   * InverterConfiguration create
   */
  export type InverterConfigurationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InverterConfiguration
     */
    select?: InverterConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InverterConfigurationInclude<ExtArgs> | null
    /**
     * The data needed to create a InverterConfiguration.
     */
    data: XOR<InverterConfigurationCreateInput, InverterConfigurationUncheckedCreateInput>
  }

  /**
   * InverterConfiguration createMany
   */
  export type InverterConfigurationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InverterConfigurations.
     */
    data: InverterConfigurationCreateManyInput | InverterConfigurationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InverterConfiguration createManyAndReturn
   */
  export type InverterConfigurationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InverterConfiguration
     */
    select?: InverterConfigurationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many InverterConfigurations.
     */
    data: InverterConfigurationCreateManyInput | InverterConfigurationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InverterConfigurationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InverterConfiguration update
   */
  export type InverterConfigurationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InverterConfiguration
     */
    select?: InverterConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InverterConfigurationInclude<ExtArgs> | null
    /**
     * The data needed to update a InverterConfiguration.
     */
    data: XOR<InverterConfigurationUpdateInput, InverterConfigurationUncheckedUpdateInput>
    /**
     * Choose, which InverterConfiguration to update.
     */
    where: InverterConfigurationWhereUniqueInput
  }

  /**
   * InverterConfiguration updateMany
   */
  export type InverterConfigurationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InverterConfigurations.
     */
    data: XOR<InverterConfigurationUpdateManyMutationInput, InverterConfigurationUncheckedUpdateManyInput>
    /**
     * Filter which InverterConfigurations to update
     */
    where?: InverterConfigurationWhereInput
  }

  /**
   * InverterConfiguration upsert
   */
  export type InverterConfigurationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InverterConfiguration
     */
    select?: InverterConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InverterConfigurationInclude<ExtArgs> | null
    /**
     * The filter to search for the InverterConfiguration to update in case it exists.
     */
    where: InverterConfigurationWhereUniqueInput
    /**
     * In case the InverterConfiguration found by the `where` argument doesn't exist, create a new InverterConfiguration with this data.
     */
    create: XOR<InverterConfigurationCreateInput, InverterConfigurationUncheckedCreateInput>
    /**
     * In case the InverterConfiguration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InverterConfigurationUpdateInput, InverterConfigurationUncheckedUpdateInput>
  }

  /**
   * InverterConfiguration delete
   */
  export type InverterConfigurationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InverterConfiguration
     */
    select?: InverterConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InverterConfigurationInclude<ExtArgs> | null
    /**
     * Filter which InverterConfiguration to delete.
     */
    where: InverterConfigurationWhereUniqueInput
  }

  /**
   * InverterConfiguration deleteMany
   */
  export type InverterConfigurationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InverterConfigurations to delete
     */
    where?: InverterConfigurationWhereInput
  }

  /**
   * InverterConfiguration without action
   */
  export type InverterConfigurationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InverterConfiguration
     */
    select?: InverterConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InverterConfigurationInclude<ExtArgs> | null
  }


  /**
   * Model BatteryConfiguration
   */

  export type AggregateBatteryConfiguration = {
    _count: BatteryConfigurationCountAggregateOutputType | null
    _avg: BatteryConfigurationAvgAggregateOutputType | null
    _sum: BatteryConfigurationSumAggregateOutputType | null
    _min: BatteryConfigurationMinAggregateOutputType | null
    _max: BatteryConfigurationMaxAggregateOutputType | null
  }

  export type BatteryConfigurationAvgAggregateOutputType = {
    ratedCapacityKw: number | null
    ratedCapacityKwh: number | null
    batteryPrice: number | null
  }

  export type BatteryConfigurationSumAggregateOutputType = {
    ratedCapacityKw: number | null
    ratedCapacityKwh: number | null
    batteryPrice: number | null
  }

  export type BatteryConfigurationMinAggregateOutputType = {
    id: string | null
    solarSystemId: string | null
    batteryManufacturer: string | null
    batteryModel: string | null
    ratedCapacityKw: number | null
    ratedCapacityKwh: number | null
    batteryPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BatteryConfigurationMaxAggregateOutputType = {
    id: string | null
    solarSystemId: string | null
    batteryManufacturer: string | null
    batteryModel: string | null
    ratedCapacityKw: number | null
    ratedCapacityKwh: number | null
    batteryPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BatteryConfigurationCountAggregateOutputType = {
    id: number
    solarSystemId: number
    batteryManufacturer: number
    batteryModel: number
    ratedCapacityKw: number
    ratedCapacityKwh: number
    batteryPrice: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BatteryConfigurationAvgAggregateInputType = {
    ratedCapacityKw?: true
    ratedCapacityKwh?: true
    batteryPrice?: true
  }

  export type BatteryConfigurationSumAggregateInputType = {
    ratedCapacityKw?: true
    ratedCapacityKwh?: true
    batteryPrice?: true
  }

  export type BatteryConfigurationMinAggregateInputType = {
    id?: true
    solarSystemId?: true
    batteryManufacturer?: true
    batteryModel?: true
    ratedCapacityKw?: true
    ratedCapacityKwh?: true
    batteryPrice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BatteryConfigurationMaxAggregateInputType = {
    id?: true
    solarSystemId?: true
    batteryManufacturer?: true
    batteryModel?: true
    ratedCapacityKw?: true
    ratedCapacityKwh?: true
    batteryPrice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BatteryConfigurationCountAggregateInputType = {
    id?: true
    solarSystemId?: true
    batteryManufacturer?: true
    batteryModel?: true
    ratedCapacityKw?: true
    ratedCapacityKwh?: true
    batteryPrice?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BatteryConfigurationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BatteryConfiguration to aggregate.
     */
    where?: BatteryConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BatteryConfigurations to fetch.
     */
    orderBy?: BatteryConfigurationOrderByWithRelationInput | BatteryConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BatteryConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BatteryConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BatteryConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BatteryConfigurations
    **/
    _count?: true | BatteryConfigurationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BatteryConfigurationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BatteryConfigurationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BatteryConfigurationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BatteryConfigurationMaxAggregateInputType
  }

  export type GetBatteryConfigurationAggregateType<T extends BatteryConfigurationAggregateArgs> = {
        [P in keyof T & keyof AggregateBatteryConfiguration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBatteryConfiguration[P]>
      : GetScalarType<T[P], AggregateBatteryConfiguration[P]>
  }




  export type BatteryConfigurationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BatteryConfigurationWhereInput
    orderBy?: BatteryConfigurationOrderByWithAggregationInput | BatteryConfigurationOrderByWithAggregationInput[]
    by: BatteryConfigurationScalarFieldEnum[] | BatteryConfigurationScalarFieldEnum
    having?: BatteryConfigurationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BatteryConfigurationCountAggregateInputType | true
    _avg?: BatteryConfigurationAvgAggregateInputType
    _sum?: BatteryConfigurationSumAggregateInputType
    _min?: BatteryConfigurationMinAggregateInputType
    _max?: BatteryConfigurationMaxAggregateInputType
  }

  export type BatteryConfigurationGroupByOutputType = {
    id: string
    solarSystemId: string
    batteryManufacturer: string | null
    batteryModel: string | null
    ratedCapacityKw: number | null
    ratedCapacityKwh: number | null
    batteryPrice: number | null
    createdAt: Date
    updatedAt: Date
    _count: BatteryConfigurationCountAggregateOutputType | null
    _avg: BatteryConfigurationAvgAggregateOutputType | null
    _sum: BatteryConfigurationSumAggregateOutputType | null
    _min: BatteryConfigurationMinAggregateOutputType | null
    _max: BatteryConfigurationMaxAggregateOutputType | null
  }

  type GetBatteryConfigurationGroupByPayload<T extends BatteryConfigurationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BatteryConfigurationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BatteryConfigurationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BatteryConfigurationGroupByOutputType[P]>
            : GetScalarType<T[P], BatteryConfigurationGroupByOutputType[P]>
        }
      >
    >


  export type BatteryConfigurationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    solarSystemId?: boolean
    batteryManufacturer?: boolean
    batteryModel?: boolean
    ratedCapacityKw?: boolean
    ratedCapacityKwh?: boolean
    batteryPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    solarSystem?: boolean | SolarSystemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["batteryConfiguration"]>

  export type BatteryConfigurationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    solarSystemId?: boolean
    batteryManufacturer?: boolean
    batteryModel?: boolean
    ratedCapacityKw?: boolean
    ratedCapacityKwh?: boolean
    batteryPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    solarSystem?: boolean | SolarSystemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["batteryConfiguration"]>

  export type BatteryConfigurationSelectScalar = {
    id?: boolean
    solarSystemId?: boolean
    batteryManufacturer?: boolean
    batteryModel?: boolean
    ratedCapacityKw?: boolean
    ratedCapacityKwh?: boolean
    batteryPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BatteryConfigurationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    solarSystem?: boolean | SolarSystemDefaultArgs<ExtArgs>
  }
  export type BatteryConfigurationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    solarSystem?: boolean | SolarSystemDefaultArgs<ExtArgs>
  }

  export type $BatteryConfigurationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BatteryConfiguration"
    objects: {
      solarSystem: Prisma.$SolarSystemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      solarSystemId: string
      batteryManufacturer: string | null
      batteryModel: string | null
      ratedCapacityKw: number | null
      ratedCapacityKwh: number | null
      batteryPrice: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["batteryConfiguration"]>
    composites: {}
  }

  type BatteryConfigurationGetPayload<S extends boolean | null | undefined | BatteryConfigurationDefaultArgs> = $Result.GetResult<Prisma.$BatteryConfigurationPayload, S>

  type BatteryConfigurationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BatteryConfigurationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BatteryConfigurationCountAggregateInputType | true
    }

  export interface BatteryConfigurationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BatteryConfiguration'], meta: { name: 'BatteryConfiguration' } }
    /**
     * Find zero or one BatteryConfiguration that matches the filter.
     * @param {BatteryConfigurationFindUniqueArgs} args - Arguments to find a BatteryConfiguration
     * @example
     * // Get one BatteryConfiguration
     * const batteryConfiguration = await prisma.batteryConfiguration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BatteryConfigurationFindUniqueArgs>(args: SelectSubset<T, BatteryConfigurationFindUniqueArgs<ExtArgs>>): Prisma__BatteryConfigurationClient<$Result.GetResult<Prisma.$BatteryConfigurationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BatteryConfiguration that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BatteryConfigurationFindUniqueOrThrowArgs} args - Arguments to find a BatteryConfiguration
     * @example
     * // Get one BatteryConfiguration
     * const batteryConfiguration = await prisma.batteryConfiguration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BatteryConfigurationFindUniqueOrThrowArgs>(args: SelectSubset<T, BatteryConfigurationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BatteryConfigurationClient<$Result.GetResult<Prisma.$BatteryConfigurationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BatteryConfiguration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatteryConfigurationFindFirstArgs} args - Arguments to find a BatteryConfiguration
     * @example
     * // Get one BatteryConfiguration
     * const batteryConfiguration = await prisma.batteryConfiguration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BatteryConfigurationFindFirstArgs>(args?: SelectSubset<T, BatteryConfigurationFindFirstArgs<ExtArgs>>): Prisma__BatteryConfigurationClient<$Result.GetResult<Prisma.$BatteryConfigurationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BatteryConfiguration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatteryConfigurationFindFirstOrThrowArgs} args - Arguments to find a BatteryConfiguration
     * @example
     * // Get one BatteryConfiguration
     * const batteryConfiguration = await prisma.batteryConfiguration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BatteryConfigurationFindFirstOrThrowArgs>(args?: SelectSubset<T, BatteryConfigurationFindFirstOrThrowArgs<ExtArgs>>): Prisma__BatteryConfigurationClient<$Result.GetResult<Prisma.$BatteryConfigurationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BatteryConfigurations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatteryConfigurationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BatteryConfigurations
     * const batteryConfigurations = await prisma.batteryConfiguration.findMany()
     * 
     * // Get first 10 BatteryConfigurations
     * const batteryConfigurations = await prisma.batteryConfiguration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const batteryConfigurationWithIdOnly = await prisma.batteryConfiguration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BatteryConfigurationFindManyArgs>(args?: SelectSubset<T, BatteryConfigurationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BatteryConfigurationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BatteryConfiguration.
     * @param {BatteryConfigurationCreateArgs} args - Arguments to create a BatteryConfiguration.
     * @example
     * // Create one BatteryConfiguration
     * const BatteryConfiguration = await prisma.batteryConfiguration.create({
     *   data: {
     *     // ... data to create a BatteryConfiguration
     *   }
     * })
     * 
     */
    create<T extends BatteryConfigurationCreateArgs>(args: SelectSubset<T, BatteryConfigurationCreateArgs<ExtArgs>>): Prisma__BatteryConfigurationClient<$Result.GetResult<Prisma.$BatteryConfigurationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BatteryConfigurations.
     * @param {BatteryConfigurationCreateManyArgs} args - Arguments to create many BatteryConfigurations.
     * @example
     * // Create many BatteryConfigurations
     * const batteryConfiguration = await prisma.batteryConfiguration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BatteryConfigurationCreateManyArgs>(args?: SelectSubset<T, BatteryConfigurationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BatteryConfigurations and returns the data saved in the database.
     * @param {BatteryConfigurationCreateManyAndReturnArgs} args - Arguments to create many BatteryConfigurations.
     * @example
     * // Create many BatteryConfigurations
     * const batteryConfiguration = await prisma.batteryConfiguration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BatteryConfigurations and only return the `id`
     * const batteryConfigurationWithIdOnly = await prisma.batteryConfiguration.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BatteryConfigurationCreateManyAndReturnArgs>(args?: SelectSubset<T, BatteryConfigurationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BatteryConfigurationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BatteryConfiguration.
     * @param {BatteryConfigurationDeleteArgs} args - Arguments to delete one BatteryConfiguration.
     * @example
     * // Delete one BatteryConfiguration
     * const BatteryConfiguration = await prisma.batteryConfiguration.delete({
     *   where: {
     *     // ... filter to delete one BatteryConfiguration
     *   }
     * })
     * 
     */
    delete<T extends BatteryConfigurationDeleteArgs>(args: SelectSubset<T, BatteryConfigurationDeleteArgs<ExtArgs>>): Prisma__BatteryConfigurationClient<$Result.GetResult<Prisma.$BatteryConfigurationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BatteryConfiguration.
     * @param {BatteryConfigurationUpdateArgs} args - Arguments to update one BatteryConfiguration.
     * @example
     * // Update one BatteryConfiguration
     * const batteryConfiguration = await prisma.batteryConfiguration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BatteryConfigurationUpdateArgs>(args: SelectSubset<T, BatteryConfigurationUpdateArgs<ExtArgs>>): Prisma__BatteryConfigurationClient<$Result.GetResult<Prisma.$BatteryConfigurationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BatteryConfigurations.
     * @param {BatteryConfigurationDeleteManyArgs} args - Arguments to filter BatteryConfigurations to delete.
     * @example
     * // Delete a few BatteryConfigurations
     * const { count } = await prisma.batteryConfiguration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BatteryConfigurationDeleteManyArgs>(args?: SelectSubset<T, BatteryConfigurationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BatteryConfigurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatteryConfigurationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BatteryConfigurations
     * const batteryConfiguration = await prisma.batteryConfiguration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BatteryConfigurationUpdateManyArgs>(args: SelectSubset<T, BatteryConfigurationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BatteryConfiguration.
     * @param {BatteryConfigurationUpsertArgs} args - Arguments to update or create a BatteryConfiguration.
     * @example
     * // Update or create a BatteryConfiguration
     * const batteryConfiguration = await prisma.batteryConfiguration.upsert({
     *   create: {
     *     // ... data to create a BatteryConfiguration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BatteryConfiguration we want to update
     *   }
     * })
     */
    upsert<T extends BatteryConfigurationUpsertArgs>(args: SelectSubset<T, BatteryConfigurationUpsertArgs<ExtArgs>>): Prisma__BatteryConfigurationClient<$Result.GetResult<Prisma.$BatteryConfigurationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BatteryConfigurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatteryConfigurationCountArgs} args - Arguments to filter BatteryConfigurations to count.
     * @example
     * // Count the number of BatteryConfigurations
     * const count = await prisma.batteryConfiguration.count({
     *   where: {
     *     // ... the filter for the BatteryConfigurations we want to count
     *   }
     * })
    **/
    count<T extends BatteryConfigurationCountArgs>(
      args?: Subset<T, BatteryConfigurationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BatteryConfigurationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BatteryConfiguration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatteryConfigurationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BatteryConfigurationAggregateArgs>(args: Subset<T, BatteryConfigurationAggregateArgs>): Prisma.PrismaPromise<GetBatteryConfigurationAggregateType<T>>

    /**
     * Group by BatteryConfiguration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatteryConfigurationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BatteryConfigurationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BatteryConfigurationGroupByArgs['orderBy'] }
        : { orderBy?: BatteryConfigurationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BatteryConfigurationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBatteryConfigurationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BatteryConfiguration model
   */
  readonly fields: BatteryConfigurationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BatteryConfiguration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BatteryConfigurationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    solarSystem<T extends SolarSystemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SolarSystemDefaultArgs<ExtArgs>>): Prisma__SolarSystemClient<$Result.GetResult<Prisma.$SolarSystemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BatteryConfiguration model
   */ 
  interface BatteryConfigurationFieldRefs {
    readonly id: FieldRef<"BatteryConfiguration", 'String'>
    readonly solarSystemId: FieldRef<"BatteryConfiguration", 'String'>
    readonly batteryManufacturer: FieldRef<"BatteryConfiguration", 'String'>
    readonly batteryModel: FieldRef<"BatteryConfiguration", 'String'>
    readonly ratedCapacityKw: FieldRef<"BatteryConfiguration", 'Float'>
    readonly ratedCapacityKwh: FieldRef<"BatteryConfiguration", 'Float'>
    readonly batteryPrice: FieldRef<"BatteryConfiguration", 'Float'>
    readonly createdAt: FieldRef<"BatteryConfiguration", 'DateTime'>
    readonly updatedAt: FieldRef<"BatteryConfiguration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BatteryConfiguration findUnique
   */
  export type BatteryConfigurationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryConfiguration
     */
    select?: BatteryConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which BatteryConfiguration to fetch.
     */
    where: BatteryConfigurationWhereUniqueInput
  }

  /**
   * BatteryConfiguration findUniqueOrThrow
   */
  export type BatteryConfigurationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryConfiguration
     */
    select?: BatteryConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which BatteryConfiguration to fetch.
     */
    where: BatteryConfigurationWhereUniqueInput
  }

  /**
   * BatteryConfiguration findFirst
   */
  export type BatteryConfigurationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryConfiguration
     */
    select?: BatteryConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which BatteryConfiguration to fetch.
     */
    where?: BatteryConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BatteryConfigurations to fetch.
     */
    orderBy?: BatteryConfigurationOrderByWithRelationInput | BatteryConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BatteryConfigurations.
     */
    cursor?: BatteryConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BatteryConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BatteryConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BatteryConfigurations.
     */
    distinct?: BatteryConfigurationScalarFieldEnum | BatteryConfigurationScalarFieldEnum[]
  }

  /**
   * BatteryConfiguration findFirstOrThrow
   */
  export type BatteryConfigurationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryConfiguration
     */
    select?: BatteryConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which BatteryConfiguration to fetch.
     */
    where?: BatteryConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BatteryConfigurations to fetch.
     */
    orderBy?: BatteryConfigurationOrderByWithRelationInput | BatteryConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BatteryConfigurations.
     */
    cursor?: BatteryConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BatteryConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BatteryConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BatteryConfigurations.
     */
    distinct?: BatteryConfigurationScalarFieldEnum | BatteryConfigurationScalarFieldEnum[]
  }

  /**
   * BatteryConfiguration findMany
   */
  export type BatteryConfigurationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryConfiguration
     */
    select?: BatteryConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryConfigurationInclude<ExtArgs> | null
    /**
     * Filter, which BatteryConfigurations to fetch.
     */
    where?: BatteryConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BatteryConfigurations to fetch.
     */
    orderBy?: BatteryConfigurationOrderByWithRelationInput | BatteryConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BatteryConfigurations.
     */
    cursor?: BatteryConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BatteryConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BatteryConfigurations.
     */
    skip?: number
    distinct?: BatteryConfigurationScalarFieldEnum | BatteryConfigurationScalarFieldEnum[]
  }

  /**
   * BatteryConfiguration create
   */
  export type BatteryConfigurationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryConfiguration
     */
    select?: BatteryConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryConfigurationInclude<ExtArgs> | null
    /**
     * The data needed to create a BatteryConfiguration.
     */
    data: XOR<BatteryConfigurationCreateInput, BatteryConfigurationUncheckedCreateInput>
  }

  /**
   * BatteryConfiguration createMany
   */
  export type BatteryConfigurationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BatteryConfigurations.
     */
    data: BatteryConfigurationCreateManyInput | BatteryConfigurationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BatteryConfiguration createManyAndReturn
   */
  export type BatteryConfigurationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryConfiguration
     */
    select?: BatteryConfigurationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BatteryConfigurations.
     */
    data: BatteryConfigurationCreateManyInput | BatteryConfigurationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryConfigurationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BatteryConfiguration update
   */
  export type BatteryConfigurationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryConfiguration
     */
    select?: BatteryConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryConfigurationInclude<ExtArgs> | null
    /**
     * The data needed to update a BatteryConfiguration.
     */
    data: XOR<BatteryConfigurationUpdateInput, BatteryConfigurationUncheckedUpdateInput>
    /**
     * Choose, which BatteryConfiguration to update.
     */
    where: BatteryConfigurationWhereUniqueInput
  }

  /**
   * BatteryConfiguration updateMany
   */
  export type BatteryConfigurationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BatteryConfigurations.
     */
    data: XOR<BatteryConfigurationUpdateManyMutationInput, BatteryConfigurationUncheckedUpdateManyInput>
    /**
     * Filter which BatteryConfigurations to update
     */
    where?: BatteryConfigurationWhereInput
  }

  /**
   * BatteryConfiguration upsert
   */
  export type BatteryConfigurationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryConfiguration
     */
    select?: BatteryConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryConfigurationInclude<ExtArgs> | null
    /**
     * The filter to search for the BatteryConfiguration to update in case it exists.
     */
    where: BatteryConfigurationWhereUniqueInput
    /**
     * In case the BatteryConfiguration found by the `where` argument doesn't exist, create a new BatteryConfiguration with this data.
     */
    create: XOR<BatteryConfigurationCreateInput, BatteryConfigurationUncheckedCreateInput>
    /**
     * In case the BatteryConfiguration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BatteryConfigurationUpdateInput, BatteryConfigurationUncheckedUpdateInput>
  }

  /**
   * BatteryConfiguration delete
   */
  export type BatteryConfigurationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryConfiguration
     */
    select?: BatteryConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryConfigurationInclude<ExtArgs> | null
    /**
     * Filter which BatteryConfiguration to delete.
     */
    where: BatteryConfigurationWhereUniqueInput
  }

  /**
   * BatteryConfiguration deleteMany
   */
  export type BatteryConfigurationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BatteryConfigurations to delete
     */
    where?: BatteryConfigurationWhereInput
  }

  /**
   * BatteryConfiguration without action
   */
  export type BatteryConfigurationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatteryConfiguration
     */
    select?: BatteryConfigurationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatteryConfigurationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SolarSystemScalarFieldEnum: {
    id: 'id',
    dataProvider1: 'dataProvider1',
    dataProvider2: 'dataProvider2',
    systemId1: 'systemId1',
    systemId2: 'systemId2',
    installationDate: 'installationDate',
    pvSystemSizeDc: 'pvSystemSizeDc',
    totalInstalledPrice: 'totalInstalledPrice',
    customerSegment: 'customerSegment',
    expansionSystem: 'expansionSystem',
    multiplePhaseSystem: 'multiplePhaseSystem',
    rebateOrGrant: 'rebateOrGrant',
    ttsLinkId: 'ttsLinkId',
    newConstruction: 'newConstruction',
    tracking: 'tracking',
    groundMounted: 'groundMounted',
    zipCode: 'zipCode',
    city: 'city',
    state: 'state',
    utilityServiceTerritory: 'utilityServiceTerritory',
    thirdPartyOwned: 'thirdPartyOwned',
    installerName: 'installerName',
    selfInstalled: 'selfInstalled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SolarSystemScalarFieldEnum = (typeof SolarSystemScalarFieldEnum)[keyof typeof SolarSystemScalarFieldEnum]


  export const ModuleConfigurationScalarFieldEnum: {
    id: 'id',
    solarSystemId: 'solarSystemId',
    configurationNumber: 'configurationNumber',
    azimuth: 'azimuth',
    tilt: 'tilt',
    moduleManufacturer: 'moduleManufacturer',
    moduleModel: 'moduleModel',
    moduleQuantity: 'moduleQuantity',
    technologyType: 'technologyType',
    bipv: 'bipv',
    bifacial: 'bifacial',
    nameplateCapacity: 'nameplateCapacity',
    efficiency: 'efficiency',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ModuleConfigurationScalarFieldEnum = (typeof ModuleConfigurationScalarFieldEnum)[keyof typeof ModuleConfigurationScalarFieldEnum]


  export const InverterConfigurationScalarFieldEnum: {
    id: 'id',
    solarSystemId: 'solarSystemId',
    configurationNumber: 'configurationNumber',
    inverterManufacturer: 'inverterManufacturer',
    inverterModel: 'inverterModel',
    inverterQuantity: 'inverterQuantity',
    microInverter: 'microInverter',
    builtInMeter: 'builtInMeter',
    outputCapacity: 'outputCapacity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InverterConfigurationScalarFieldEnum = (typeof InverterConfigurationScalarFieldEnum)[keyof typeof InverterConfigurationScalarFieldEnum]


  export const BatteryConfigurationScalarFieldEnum: {
    id: 'id',
    solarSystemId: 'solarSystemId',
    batteryManufacturer: 'batteryManufacturer',
    batteryModel: 'batteryModel',
    ratedCapacityKw: 'ratedCapacityKw',
    ratedCapacityKwh: 'ratedCapacityKwh',
    batteryPrice: 'batteryPrice',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BatteryConfigurationScalarFieldEnum = (typeof BatteryConfigurationScalarFieldEnum)[keyof typeof BatteryConfigurationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type SolarSystemWhereInput = {
    AND?: SolarSystemWhereInput | SolarSystemWhereInput[]
    OR?: SolarSystemWhereInput[]
    NOT?: SolarSystemWhereInput | SolarSystemWhereInput[]
    id?: StringFilter<"SolarSystem"> | string
    dataProvider1?: StringNullableFilter<"SolarSystem"> | string | null
    dataProvider2?: StringNullableFilter<"SolarSystem"> | string | null
    systemId1?: StringNullableFilter<"SolarSystem"> | string | null
    systemId2?: StringNullableFilter<"SolarSystem"> | string | null
    installationDate?: DateTimeNullableFilter<"SolarSystem"> | Date | string | null
    pvSystemSizeDc?: FloatNullableFilter<"SolarSystem"> | number | null
    totalInstalledPrice?: FloatNullableFilter<"SolarSystem"> | number | null
    customerSegment?: StringNullableFilter<"SolarSystem"> | string | null
    expansionSystem?: BoolNullableFilter<"SolarSystem"> | boolean | null
    multiplePhaseSystem?: BoolNullableFilter<"SolarSystem"> | boolean | null
    rebateOrGrant?: FloatNullableFilter<"SolarSystem"> | number | null
    ttsLinkId?: StringNullableFilter<"SolarSystem"> | string | null
    newConstruction?: BoolNullableFilter<"SolarSystem"> | boolean | null
    tracking?: BoolNullableFilter<"SolarSystem"> | boolean | null
    groundMounted?: BoolNullableFilter<"SolarSystem"> | boolean | null
    zipCode?: StringNullableFilter<"SolarSystem"> | string | null
    city?: StringNullableFilter<"SolarSystem"> | string | null
    state?: StringNullableFilter<"SolarSystem"> | string | null
    utilityServiceTerritory?: StringNullableFilter<"SolarSystem"> | string | null
    thirdPartyOwned?: BoolNullableFilter<"SolarSystem"> | boolean | null
    installerName?: StringNullableFilter<"SolarSystem"> | string | null
    selfInstalled?: BoolNullableFilter<"SolarSystem"> | boolean | null
    createdAt?: DateTimeFilter<"SolarSystem"> | Date | string
    updatedAt?: DateTimeFilter<"SolarSystem"> | Date | string
    moduleConfigurations?: ModuleConfigurationListRelationFilter
    inverterConfigurations?: InverterConfigurationListRelationFilter
    batteryConfigurations?: BatteryConfigurationListRelationFilter
  }

  export type SolarSystemOrderByWithRelationInput = {
    id?: SortOrder
    dataProvider1?: SortOrderInput | SortOrder
    dataProvider2?: SortOrderInput | SortOrder
    systemId1?: SortOrderInput | SortOrder
    systemId2?: SortOrderInput | SortOrder
    installationDate?: SortOrderInput | SortOrder
    pvSystemSizeDc?: SortOrderInput | SortOrder
    totalInstalledPrice?: SortOrderInput | SortOrder
    customerSegment?: SortOrderInput | SortOrder
    expansionSystem?: SortOrderInput | SortOrder
    multiplePhaseSystem?: SortOrderInput | SortOrder
    rebateOrGrant?: SortOrderInput | SortOrder
    ttsLinkId?: SortOrderInput | SortOrder
    newConstruction?: SortOrderInput | SortOrder
    tracking?: SortOrderInput | SortOrder
    groundMounted?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    utilityServiceTerritory?: SortOrderInput | SortOrder
    thirdPartyOwned?: SortOrderInput | SortOrder
    installerName?: SortOrderInput | SortOrder
    selfInstalled?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    moduleConfigurations?: ModuleConfigurationOrderByRelationAggregateInput
    inverterConfigurations?: InverterConfigurationOrderByRelationAggregateInput
    batteryConfigurations?: BatteryConfigurationOrderByRelationAggregateInput
  }

  export type SolarSystemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SolarSystemWhereInput | SolarSystemWhereInput[]
    OR?: SolarSystemWhereInput[]
    NOT?: SolarSystemWhereInput | SolarSystemWhereInput[]
    dataProvider1?: StringNullableFilter<"SolarSystem"> | string | null
    dataProvider2?: StringNullableFilter<"SolarSystem"> | string | null
    systemId1?: StringNullableFilter<"SolarSystem"> | string | null
    systemId2?: StringNullableFilter<"SolarSystem"> | string | null
    installationDate?: DateTimeNullableFilter<"SolarSystem"> | Date | string | null
    pvSystemSizeDc?: FloatNullableFilter<"SolarSystem"> | number | null
    totalInstalledPrice?: FloatNullableFilter<"SolarSystem"> | number | null
    customerSegment?: StringNullableFilter<"SolarSystem"> | string | null
    expansionSystem?: BoolNullableFilter<"SolarSystem"> | boolean | null
    multiplePhaseSystem?: BoolNullableFilter<"SolarSystem"> | boolean | null
    rebateOrGrant?: FloatNullableFilter<"SolarSystem"> | number | null
    ttsLinkId?: StringNullableFilter<"SolarSystem"> | string | null
    newConstruction?: BoolNullableFilter<"SolarSystem"> | boolean | null
    tracking?: BoolNullableFilter<"SolarSystem"> | boolean | null
    groundMounted?: BoolNullableFilter<"SolarSystem"> | boolean | null
    zipCode?: StringNullableFilter<"SolarSystem"> | string | null
    city?: StringNullableFilter<"SolarSystem"> | string | null
    state?: StringNullableFilter<"SolarSystem"> | string | null
    utilityServiceTerritory?: StringNullableFilter<"SolarSystem"> | string | null
    thirdPartyOwned?: BoolNullableFilter<"SolarSystem"> | boolean | null
    installerName?: StringNullableFilter<"SolarSystem"> | string | null
    selfInstalled?: BoolNullableFilter<"SolarSystem"> | boolean | null
    createdAt?: DateTimeFilter<"SolarSystem"> | Date | string
    updatedAt?: DateTimeFilter<"SolarSystem"> | Date | string
    moduleConfigurations?: ModuleConfigurationListRelationFilter
    inverterConfigurations?: InverterConfigurationListRelationFilter
    batteryConfigurations?: BatteryConfigurationListRelationFilter
  }, "id">

  export type SolarSystemOrderByWithAggregationInput = {
    id?: SortOrder
    dataProvider1?: SortOrderInput | SortOrder
    dataProvider2?: SortOrderInput | SortOrder
    systemId1?: SortOrderInput | SortOrder
    systemId2?: SortOrderInput | SortOrder
    installationDate?: SortOrderInput | SortOrder
    pvSystemSizeDc?: SortOrderInput | SortOrder
    totalInstalledPrice?: SortOrderInput | SortOrder
    customerSegment?: SortOrderInput | SortOrder
    expansionSystem?: SortOrderInput | SortOrder
    multiplePhaseSystem?: SortOrderInput | SortOrder
    rebateOrGrant?: SortOrderInput | SortOrder
    ttsLinkId?: SortOrderInput | SortOrder
    newConstruction?: SortOrderInput | SortOrder
    tracking?: SortOrderInput | SortOrder
    groundMounted?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    utilityServiceTerritory?: SortOrderInput | SortOrder
    thirdPartyOwned?: SortOrderInput | SortOrder
    installerName?: SortOrderInput | SortOrder
    selfInstalled?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SolarSystemCountOrderByAggregateInput
    _avg?: SolarSystemAvgOrderByAggregateInput
    _max?: SolarSystemMaxOrderByAggregateInput
    _min?: SolarSystemMinOrderByAggregateInput
    _sum?: SolarSystemSumOrderByAggregateInput
  }

  export type SolarSystemScalarWhereWithAggregatesInput = {
    AND?: SolarSystemScalarWhereWithAggregatesInput | SolarSystemScalarWhereWithAggregatesInput[]
    OR?: SolarSystemScalarWhereWithAggregatesInput[]
    NOT?: SolarSystemScalarWhereWithAggregatesInput | SolarSystemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SolarSystem"> | string
    dataProvider1?: StringNullableWithAggregatesFilter<"SolarSystem"> | string | null
    dataProvider2?: StringNullableWithAggregatesFilter<"SolarSystem"> | string | null
    systemId1?: StringNullableWithAggregatesFilter<"SolarSystem"> | string | null
    systemId2?: StringNullableWithAggregatesFilter<"SolarSystem"> | string | null
    installationDate?: DateTimeNullableWithAggregatesFilter<"SolarSystem"> | Date | string | null
    pvSystemSizeDc?: FloatNullableWithAggregatesFilter<"SolarSystem"> | number | null
    totalInstalledPrice?: FloatNullableWithAggregatesFilter<"SolarSystem"> | number | null
    customerSegment?: StringNullableWithAggregatesFilter<"SolarSystem"> | string | null
    expansionSystem?: BoolNullableWithAggregatesFilter<"SolarSystem"> | boolean | null
    multiplePhaseSystem?: BoolNullableWithAggregatesFilter<"SolarSystem"> | boolean | null
    rebateOrGrant?: FloatNullableWithAggregatesFilter<"SolarSystem"> | number | null
    ttsLinkId?: StringNullableWithAggregatesFilter<"SolarSystem"> | string | null
    newConstruction?: BoolNullableWithAggregatesFilter<"SolarSystem"> | boolean | null
    tracking?: BoolNullableWithAggregatesFilter<"SolarSystem"> | boolean | null
    groundMounted?: BoolNullableWithAggregatesFilter<"SolarSystem"> | boolean | null
    zipCode?: StringNullableWithAggregatesFilter<"SolarSystem"> | string | null
    city?: StringNullableWithAggregatesFilter<"SolarSystem"> | string | null
    state?: StringNullableWithAggregatesFilter<"SolarSystem"> | string | null
    utilityServiceTerritory?: StringNullableWithAggregatesFilter<"SolarSystem"> | string | null
    thirdPartyOwned?: BoolNullableWithAggregatesFilter<"SolarSystem"> | boolean | null
    installerName?: StringNullableWithAggregatesFilter<"SolarSystem"> | string | null
    selfInstalled?: BoolNullableWithAggregatesFilter<"SolarSystem"> | boolean | null
    createdAt?: DateTimeWithAggregatesFilter<"SolarSystem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SolarSystem"> | Date | string
  }

  export type ModuleConfigurationWhereInput = {
    AND?: ModuleConfigurationWhereInput | ModuleConfigurationWhereInput[]
    OR?: ModuleConfigurationWhereInput[]
    NOT?: ModuleConfigurationWhereInput | ModuleConfigurationWhereInput[]
    id?: StringFilter<"ModuleConfiguration"> | string
    solarSystemId?: StringFilter<"ModuleConfiguration"> | string
    configurationNumber?: IntFilter<"ModuleConfiguration"> | number
    azimuth?: FloatNullableFilter<"ModuleConfiguration"> | number | null
    tilt?: FloatNullableFilter<"ModuleConfiguration"> | number | null
    moduleManufacturer?: StringNullableFilter<"ModuleConfiguration"> | string | null
    moduleModel?: StringNullableFilter<"ModuleConfiguration"> | string | null
    moduleQuantity?: IntNullableFilter<"ModuleConfiguration"> | number | null
    technologyType?: StringNullableFilter<"ModuleConfiguration"> | string | null
    bipv?: BoolNullableFilter<"ModuleConfiguration"> | boolean | null
    bifacial?: BoolNullableFilter<"ModuleConfiguration"> | boolean | null
    nameplateCapacity?: FloatNullableFilter<"ModuleConfiguration"> | number | null
    efficiency?: FloatNullableFilter<"ModuleConfiguration"> | number | null
    createdAt?: DateTimeFilter<"ModuleConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"ModuleConfiguration"> | Date | string
    solarSystem?: XOR<SolarSystemRelationFilter, SolarSystemWhereInput>
  }

  export type ModuleConfigurationOrderByWithRelationInput = {
    id?: SortOrder
    solarSystemId?: SortOrder
    configurationNumber?: SortOrder
    azimuth?: SortOrderInput | SortOrder
    tilt?: SortOrderInput | SortOrder
    moduleManufacturer?: SortOrderInput | SortOrder
    moduleModel?: SortOrderInput | SortOrder
    moduleQuantity?: SortOrderInput | SortOrder
    technologyType?: SortOrderInput | SortOrder
    bipv?: SortOrderInput | SortOrder
    bifacial?: SortOrderInput | SortOrder
    nameplateCapacity?: SortOrderInput | SortOrder
    efficiency?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    solarSystem?: SolarSystemOrderByWithRelationInput
  }

  export type ModuleConfigurationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ModuleConfigurationWhereInput | ModuleConfigurationWhereInput[]
    OR?: ModuleConfigurationWhereInput[]
    NOT?: ModuleConfigurationWhereInput | ModuleConfigurationWhereInput[]
    solarSystemId?: StringFilter<"ModuleConfiguration"> | string
    configurationNumber?: IntFilter<"ModuleConfiguration"> | number
    azimuth?: FloatNullableFilter<"ModuleConfiguration"> | number | null
    tilt?: FloatNullableFilter<"ModuleConfiguration"> | number | null
    moduleManufacturer?: StringNullableFilter<"ModuleConfiguration"> | string | null
    moduleModel?: StringNullableFilter<"ModuleConfiguration"> | string | null
    moduleQuantity?: IntNullableFilter<"ModuleConfiguration"> | number | null
    technologyType?: StringNullableFilter<"ModuleConfiguration"> | string | null
    bipv?: BoolNullableFilter<"ModuleConfiguration"> | boolean | null
    bifacial?: BoolNullableFilter<"ModuleConfiguration"> | boolean | null
    nameplateCapacity?: FloatNullableFilter<"ModuleConfiguration"> | number | null
    efficiency?: FloatNullableFilter<"ModuleConfiguration"> | number | null
    createdAt?: DateTimeFilter<"ModuleConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"ModuleConfiguration"> | Date | string
    solarSystem?: XOR<SolarSystemRelationFilter, SolarSystemWhereInput>
  }, "id">

  export type ModuleConfigurationOrderByWithAggregationInput = {
    id?: SortOrder
    solarSystemId?: SortOrder
    configurationNumber?: SortOrder
    azimuth?: SortOrderInput | SortOrder
    tilt?: SortOrderInput | SortOrder
    moduleManufacturer?: SortOrderInput | SortOrder
    moduleModel?: SortOrderInput | SortOrder
    moduleQuantity?: SortOrderInput | SortOrder
    technologyType?: SortOrderInput | SortOrder
    bipv?: SortOrderInput | SortOrder
    bifacial?: SortOrderInput | SortOrder
    nameplateCapacity?: SortOrderInput | SortOrder
    efficiency?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ModuleConfigurationCountOrderByAggregateInput
    _avg?: ModuleConfigurationAvgOrderByAggregateInput
    _max?: ModuleConfigurationMaxOrderByAggregateInput
    _min?: ModuleConfigurationMinOrderByAggregateInput
    _sum?: ModuleConfigurationSumOrderByAggregateInput
  }

  export type ModuleConfigurationScalarWhereWithAggregatesInput = {
    AND?: ModuleConfigurationScalarWhereWithAggregatesInput | ModuleConfigurationScalarWhereWithAggregatesInput[]
    OR?: ModuleConfigurationScalarWhereWithAggregatesInput[]
    NOT?: ModuleConfigurationScalarWhereWithAggregatesInput | ModuleConfigurationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ModuleConfiguration"> | string
    solarSystemId?: StringWithAggregatesFilter<"ModuleConfiguration"> | string
    configurationNumber?: IntWithAggregatesFilter<"ModuleConfiguration"> | number
    azimuth?: FloatNullableWithAggregatesFilter<"ModuleConfiguration"> | number | null
    tilt?: FloatNullableWithAggregatesFilter<"ModuleConfiguration"> | number | null
    moduleManufacturer?: StringNullableWithAggregatesFilter<"ModuleConfiguration"> | string | null
    moduleModel?: StringNullableWithAggregatesFilter<"ModuleConfiguration"> | string | null
    moduleQuantity?: IntNullableWithAggregatesFilter<"ModuleConfiguration"> | number | null
    technologyType?: StringNullableWithAggregatesFilter<"ModuleConfiguration"> | string | null
    bipv?: BoolNullableWithAggregatesFilter<"ModuleConfiguration"> | boolean | null
    bifacial?: BoolNullableWithAggregatesFilter<"ModuleConfiguration"> | boolean | null
    nameplateCapacity?: FloatNullableWithAggregatesFilter<"ModuleConfiguration"> | number | null
    efficiency?: FloatNullableWithAggregatesFilter<"ModuleConfiguration"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"ModuleConfiguration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ModuleConfiguration"> | Date | string
  }

  export type InverterConfigurationWhereInput = {
    AND?: InverterConfigurationWhereInput | InverterConfigurationWhereInput[]
    OR?: InverterConfigurationWhereInput[]
    NOT?: InverterConfigurationWhereInput | InverterConfigurationWhereInput[]
    id?: StringFilter<"InverterConfiguration"> | string
    solarSystemId?: StringFilter<"InverterConfiguration"> | string
    configurationNumber?: IntFilter<"InverterConfiguration"> | number
    inverterManufacturer?: StringNullableFilter<"InverterConfiguration"> | string | null
    inverterModel?: StringNullableFilter<"InverterConfiguration"> | string | null
    inverterQuantity?: IntNullableFilter<"InverterConfiguration"> | number | null
    microInverter?: BoolNullableFilter<"InverterConfiguration"> | boolean | null
    builtInMeter?: BoolNullableFilter<"InverterConfiguration"> | boolean | null
    outputCapacity?: FloatNullableFilter<"InverterConfiguration"> | number | null
    createdAt?: DateTimeFilter<"InverterConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"InverterConfiguration"> | Date | string
    solarSystem?: XOR<SolarSystemRelationFilter, SolarSystemWhereInput>
  }

  export type InverterConfigurationOrderByWithRelationInput = {
    id?: SortOrder
    solarSystemId?: SortOrder
    configurationNumber?: SortOrder
    inverterManufacturer?: SortOrderInput | SortOrder
    inverterModel?: SortOrderInput | SortOrder
    inverterQuantity?: SortOrderInput | SortOrder
    microInverter?: SortOrderInput | SortOrder
    builtInMeter?: SortOrderInput | SortOrder
    outputCapacity?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    solarSystem?: SolarSystemOrderByWithRelationInput
  }

  export type InverterConfigurationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InverterConfigurationWhereInput | InverterConfigurationWhereInput[]
    OR?: InverterConfigurationWhereInput[]
    NOT?: InverterConfigurationWhereInput | InverterConfigurationWhereInput[]
    solarSystemId?: StringFilter<"InverterConfiguration"> | string
    configurationNumber?: IntFilter<"InverterConfiguration"> | number
    inverterManufacturer?: StringNullableFilter<"InverterConfiguration"> | string | null
    inverterModel?: StringNullableFilter<"InverterConfiguration"> | string | null
    inverterQuantity?: IntNullableFilter<"InverterConfiguration"> | number | null
    microInverter?: BoolNullableFilter<"InverterConfiguration"> | boolean | null
    builtInMeter?: BoolNullableFilter<"InverterConfiguration"> | boolean | null
    outputCapacity?: FloatNullableFilter<"InverterConfiguration"> | number | null
    createdAt?: DateTimeFilter<"InverterConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"InverterConfiguration"> | Date | string
    solarSystem?: XOR<SolarSystemRelationFilter, SolarSystemWhereInput>
  }, "id">

  export type InverterConfigurationOrderByWithAggregationInput = {
    id?: SortOrder
    solarSystemId?: SortOrder
    configurationNumber?: SortOrder
    inverterManufacturer?: SortOrderInput | SortOrder
    inverterModel?: SortOrderInput | SortOrder
    inverterQuantity?: SortOrderInput | SortOrder
    microInverter?: SortOrderInput | SortOrder
    builtInMeter?: SortOrderInput | SortOrder
    outputCapacity?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InverterConfigurationCountOrderByAggregateInput
    _avg?: InverterConfigurationAvgOrderByAggregateInput
    _max?: InverterConfigurationMaxOrderByAggregateInput
    _min?: InverterConfigurationMinOrderByAggregateInput
    _sum?: InverterConfigurationSumOrderByAggregateInput
  }

  export type InverterConfigurationScalarWhereWithAggregatesInput = {
    AND?: InverterConfigurationScalarWhereWithAggregatesInput | InverterConfigurationScalarWhereWithAggregatesInput[]
    OR?: InverterConfigurationScalarWhereWithAggregatesInput[]
    NOT?: InverterConfigurationScalarWhereWithAggregatesInput | InverterConfigurationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InverterConfiguration"> | string
    solarSystemId?: StringWithAggregatesFilter<"InverterConfiguration"> | string
    configurationNumber?: IntWithAggregatesFilter<"InverterConfiguration"> | number
    inverterManufacturer?: StringNullableWithAggregatesFilter<"InverterConfiguration"> | string | null
    inverterModel?: StringNullableWithAggregatesFilter<"InverterConfiguration"> | string | null
    inverterQuantity?: IntNullableWithAggregatesFilter<"InverterConfiguration"> | number | null
    microInverter?: BoolNullableWithAggregatesFilter<"InverterConfiguration"> | boolean | null
    builtInMeter?: BoolNullableWithAggregatesFilter<"InverterConfiguration"> | boolean | null
    outputCapacity?: FloatNullableWithAggregatesFilter<"InverterConfiguration"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"InverterConfiguration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InverterConfiguration"> | Date | string
  }

  export type BatteryConfigurationWhereInput = {
    AND?: BatteryConfigurationWhereInput | BatteryConfigurationWhereInput[]
    OR?: BatteryConfigurationWhereInput[]
    NOT?: BatteryConfigurationWhereInput | BatteryConfigurationWhereInput[]
    id?: StringFilter<"BatteryConfiguration"> | string
    solarSystemId?: StringFilter<"BatteryConfiguration"> | string
    batteryManufacturer?: StringNullableFilter<"BatteryConfiguration"> | string | null
    batteryModel?: StringNullableFilter<"BatteryConfiguration"> | string | null
    ratedCapacityKw?: FloatNullableFilter<"BatteryConfiguration"> | number | null
    ratedCapacityKwh?: FloatNullableFilter<"BatteryConfiguration"> | number | null
    batteryPrice?: FloatNullableFilter<"BatteryConfiguration"> | number | null
    createdAt?: DateTimeFilter<"BatteryConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"BatteryConfiguration"> | Date | string
    solarSystem?: XOR<SolarSystemRelationFilter, SolarSystemWhereInput>
  }

  export type BatteryConfigurationOrderByWithRelationInput = {
    id?: SortOrder
    solarSystemId?: SortOrder
    batteryManufacturer?: SortOrderInput | SortOrder
    batteryModel?: SortOrderInput | SortOrder
    ratedCapacityKw?: SortOrderInput | SortOrder
    ratedCapacityKwh?: SortOrderInput | SortOrder
    batteryPrice?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    solarSystem?: SolarSystemOrderByWithRelationInput
  }

  export type BatteryConfigurationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BatteryConfigurationWhereInput | BatteryConfigurationWhereInput[]
    OR?: BatteryConfigurationWhereInput[]
    NOT?: BatteryConfigurationWhereInput | BatteryConfigurationWhereInput[]
    solarSystemId?: StringFilter<"BatteryConfiguration"> | string
    batteryManufacturer?: StringNullableFilter<"BatteryConfiguration"> | string | null
    batteryModel?: StringNullableFilter<"BatteryConfiguration"> | string | null
    ratedCapacityKw?: FloatNullableFilter<"BatteryConfiguration"> | number | null
    ratedCapacityKwh?: FloatNullableFilter<"BatteryConfiguration"> | number | null
    batteryPrice?: FloatNullableFilter<"BatteryConfiguration"> | number | null
    createdAt?: DateTimeFilter<"BatteryConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"BatteryConfiguration"> | Date | string
    solarSystem?: XOR<SolarSystemRelationFilter, SolarSystemWhereInput>
  }, "id">

  export type BatteryConfigurationOrderByWithAggregationInput = {
    id?: SortOrder
    solarSystemId?: SortOrder
    batteryManufacturer?: SortOrderInput | SortOrder
    batteryModel?: SortOrderInput | SortOrder
    ratedCapacityKw?: SortOrderInput | SortOrder
    ratedCapacityKwh?: SortOrderInput | SortOrder
    batteryPrice?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BatteryConfigurationCountOrderByAggregateInput
    _avg?: BatteryConfigurationAvgOrderByAggregateInput
    _max?: BatteryConfigurationMaxOrderByAggregateInput
    _min?: BatteryConfigurationMinOrderByAggregateInput
    _sum?: BatteryConfigurationSumOrderByAggregateInput
  }

  export type BatteryConfigurationScalarWhereWithAggregatesInput = {
    AND?: BatteryConfigurationScalarWhereWithAggregatesInput | BatteryConfigurationScalarWhereWithAggregatesInput[]
    OR?: BatteryConfigurationScalarWhereWithAggregatesInput[]
    NOT?: BatteryConfigurationScalarWhereWithAggregatesInput | BatteryConfigurationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BatteryConfiguration"> | string
    solarSystemId?: StringWithAggregatesFilter<"BatteryConfiguration"> | string
    batteryManufacturer?: StringNullableWithAggregatesFilter<"BatteryConfiguration"> | string | null
    batteryModel?: StringNullableWithAggregatesFilter<"BatteryConfiguration"> | string | null
    ratedCapacityKw?: FloatNullableWithAggregatesFilter<"BatteryConfiguration"> | number | null
    ratedCapacityKwh?: FloatNullableWithAggregatesFilter<"BatteryConfiguration"> | number | null
    batteryPrice?: FloatNullableWithAggregatesFilter<"BatteryConfiguration"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"BatteryConfiguration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BatteryConfiguration"> | Date | string
  }

  export type SolarSystemCreateInput = {
    id?: string
    dataProvider1?: string | null
    dataProvider2?: string | null
    systemId1?: string | null
    systemId2?: string | null
    installationDate?: Date | string | null
    pvSystemSizeDc?: number | null
    totalInstalledPrice?: number | null
    customerSegment?: string | null
    expansionSystem?: boolean | null
    multiplePhaseSystem?: boolean | null
    rebateOrGrant?: number | null
    ttsLinkId?: string | null
    newConstruction?: boolean | null
    tracking?: boolean | null
    groundMounted?: boolean | null
    zipCode?: string | null
    city?: string | null
    state?: string | null
    utilityServiceTerritory?: string | null
    thirdPartyOwned?: boolean | null
    installerName?: string | null
    selfInstalled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    moduleConfigurations?: ModuleConfigurationCreateNestedManyWithoutSolarSystemInput
    inverterConfigurations?: InverterConfigurationCreateNestedManyWithoutSolarSystemInput
    batteryConfigurations?: BatteryConfigurationCreateNestedManyWithoutSolarSystemInput
  }

  export type SolarSystemUncheckedCreateInput = {
    id?: string
    dataProvider1?: string | null
    dataProvider2?: string | null
    systemId1?: string | null
    systemId2?: string | null
    installationDate?: Date | string | null
    pvSystemSizeDc?: number | null
    totalInstalledPrice?: number | null
    customerSegment?: string | null
    expansionSystem?: boolean | null
    multiplePhaseSystem?: boolean | null
    rebateOrGrant?: number | null
    ttsLinkId?: string | null
    newConstruction?: boolean | null
    tracking?: boolean | null
    groundMounted?: boolean | null
    zipCode?: string | null
    city?: string | null
    state?: string | null
    utilityServiceTerritory?: string | null
    thirdPartyOwned?: boolean | null
    installerName?: string | null
    selfInstalled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    moduleConfigurations?: ModuleConfigurationUncheckedCreateNestedManyWithoutSolarSystemInput
    inverterConfigurations?: InverterConfigurationUncheckedCreateNestedManyWithoutSolarSystemInput
    batteryConfigurations?: BatteryConfigurationUncheckedCreateNestedManyWithoutSolarSystemInput
  }

  export type SolarSystemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataProvider1?: NullableStringFieldUpdateOperationsInput | string | null
    dataProvider2?: NullableStringFieldUpdateOperationsInput | string | null
    systemId1?: NullableStringFieldUpdateOperationsInput | string | null
    systemId2?: NullableStringFieldUpdateOperationsInput | string | null
    installationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pvSystemSizeDc?: NullableFloatFieldUpdateOperationsInput | number | null
    totalInstalledPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customerSegment?: NullableStringFieldUpdateOperationsInput | string | null
    expansionSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    multiplePhaseSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rebateOrGrant?: NullableFloatFieldUpdateOperationsInput | number | null
    ttsLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    newConstruction?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tracking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    groundMounted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    utilityServiceTerritory?: NullableStringFieldUpdateOperationsInput | string | null
    thirdPartyOwned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    installerName?: NullableStringFieldUpdateOperationsInput | string | null
    selfInstalled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    moduleConfigurations?: ModuleConfigurationUpdateManyWithoutSolarSystemNestedInput
    inverterConfigurations?: InverterConfigurationUpdateManyWithoutSolarSystemNestedInput
    batteryConfigurations?: BatteryConfigurationUpdateManyWithoutSolarSystemNestedInput
  }

  export type SolarSystemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataProvider1?: NullableStringFieldUpdateOperationsInput | string | null
    dataProvider2?: NullableStringFieldUpdateOperationsInput | string | null
    systemId1?: NullableStringFieldUpdateOperationsInput | string | null
    systemId2?: NullableStringFieldUpdateOperationsInput | string | null
    installationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pvSystemSizeDc?: NullableFloatFieldUpdateOperationsInput | number | null
    totalInstalledPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customerSegment?: NullableStringFieldUpdateOperationsInput | string | null
    expansionSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    multiplePhaseSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rebateOrGrant?: NullableFloatFieldUpdateOperationsInput | number | null
    ttsLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    newConstruction?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tracking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    groundMounted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    utilityServiceTerritory?: NullableStringFieldUpdateOperationsInput | string | null
    thirdPartyOwned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    installerName?: NullableStringFieldUpdateOperationsInput | string | null
    selfInstalled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    moduleConfigurations?: ModuleConfigurationUncheckedUpdateManyWithoutSolarSystemNestedInput
    inverterConfigurations?: InverterConfigurationUncheckedUpdateManyWithoutSolarSystemNestedInput
    batteryConfigurations?: BatteryConfigurationUncheckedUpdateManyWithoutSolarSystemNestedInput
  }

  export type SolarSystemCreateManyInput = {
    id?: string
    dataProvider1?: string | null
    dataProvider2?: string | null
    systemId1?: string | null
    systemId2?: string | null
    installationDate?: Date | string | null
    pvSystemSizeDc?: number | null
    totalInstalledPrice?: number | null
    customerSegment?: string | null
    expansionSystem?: boolean | null
    multiplePhaseSystem?: boolean | null
    rebateOrGrant?: number | null
    ttsLinkId?: string | null
    newConstruction?: boolean | null
    tracking?: boolean | null
    groundMounted?: boolean | null
    zipCode?: string | null
    city?: string | null
    state?: string | null
    utilityServiceTerritory?: string | null
    thirdPartyOwned?: boolean | null
    installerName?: string | null
    selfInstalled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SolarSystemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataProvider1?: NullableStringFieldUpdateOperationsInput | string | null
    dataProvider2?: NullableStringFieldUpdateOperationsInput | string | null
    systemId1?: NullableStringFieldUpdateOperationsInput | string | null
    systemId2?: NullableStringFieldUpdateOperationsInput | string | null
    installationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pvSystemSizeDc?: NullableFloatFieldUpdateOperationsInput | number | null
    totalInstalledPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customerSegment?: NullableStringFieldUpdateOperationsInput | string | null
    expansionSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    multiplePhaseSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rebateOrGrant?: NullableFloatFieldUpdateOperationsInput | number | null
    ttsLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    newConstruction?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tracking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    groundMounted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    utilityServiceTerritory?: NullableStringFieldUpdateOperationsInput | string | null
    thirdPartyOwned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    installerName?: NullableStringFieldUpdateOperationsInput | string | null
    selfInstalled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SolarSystemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataProvider1?: NullableStringFieldUpdateOperationsInput | string | null
    dataProvider2?: NullableStringFieldUpdateOperationsInput | string | null
    systemId1?: NullableStringFieldUpdateOperationsInput | string | null
    systemId2?: NullableStringFieldUpdateOperationsInput | string | null
    installationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pvSystemSizeDc?: NullableFloatFieldUpdateOperationsInput | number | null
    totalInstalledPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customerSegment?: NullableStringFieldUpdateOperationsInput | string | null
    expansionSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    multiplePhaseSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rebateOrGrant?: NullableFloatFieldUpdateOperationsInput | number | null
    ttsLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    newConstruction?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tracking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    groundMounted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    utilityServiceTerritory?: NullableStringFieldUpdateOperationsInput | string | null
    thirdPartyOwned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    installerName?: NullableStringFieldUpdateOperationsInput | string | null
    selfInstalled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModuleConfigurationCreateInput = {
    id?: string
    configurationNumber: number
    azimuth?: number | null
    tilt?: number | null
    moduleManufacturer?: string | null
    moduleModel?: string | null
    moduleQuantity?: number | null
    technologyType?: string | null
    bipv?: boolean | null
    bifacial?: boolean | null
    nameplateCapacity?: number | null
    efficiency?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    solarSystem: SolarSystemCreateNestedOneWithoutModuleConfigurationsInput
  }

  export type ModuleConfigurationUncheckedCreateInput = {
    id?: string
    solarSystemId: string
    configurationNumber: number
    azimuth?: number | null
    tilt?: number | null
    moduleManufacturer?: string | null
    moduleModel?: string | null
    moduleQuantity?: number | null
    technologyType?: string | null
    bipv?: boolean | null
    bifacial?: boolean | null
    nameplateCapacity?: number | null
    efficiency?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ModuleConfigurationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    configurationNumber?: IntFieldUpdateOperationsInput | number
    azimuth?: NullableFloatFieldUpdateOperationsInput | number | null
    tilt?: NullableFloatFieldUpdateOperationsInput | number | null
    moduleManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    moduleModel?: NullableStringFieldUpdateOperationsInput | string | null
    moduleQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    technologyType?: NullableStringFieldUpdateOperationsInput | string | null
    bipv?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bifacial?: NullableBoolFieldUpdateOperationsInput | boolean | null
    nameplateCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    efficiency?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    solarSystem?: SolarSystemUpdateOneRequiredWithoutModuleConfigurationsNestedInput
  }

  export type ModuleConfigurationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    solarSystemId?: StringFieldUpdateOperationsInput | string
    configurationNumber?: IntFieldUpdateOperationsInput | number
    azimuth?: NullableFloatFieldUpdateOperationsInput | number | null
    tilt?: NullableFloatFieldUpdateOperationsInput | number | null
    moduleManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    moduleModel?: NullableStringFieldUpdateOperationsInput | string | null
    moduleQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    technologyType?: NullableStringFieldUpdateOperationsInput | string | null
    bipv?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bifacial?: NullableBoolFieldUpdateOperationsInput | boolean | null
    nameplateCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    efficiency?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModuleConfigurationCreateManyInput = {
    id?: string
    solarSystemId: string
    configurationNumber: number
    azimuth?: number | null
    tilt?: number | null
    moduleManufacturer?: string | null
    moduleModel?: string | null
    moduleQuantity?: number | null
    technologyType?: string | null
    bipv?: boolean | null
    bifacial?: boolean | null
    nameplateCapacity?: number | null
    efficiency?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ModuleConfigurationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    configurationNumber?: IntFieldUpdateOperationsInput | number
    azimuth?: NullableFloatFieldUpdateOperationsInput | number | null
    tilt?: NullableFloatFieldUpdateOperationsInput | number | null
    moduleManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    moduleModel?: NullableStringFieldUpdateOperationsInput | string | null
    moduleQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    technologyType?: NullableStringFieldUpdateOperationsInput | string | null
    bipv?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bifacial?: NullableBoolFieldUpdateOperationsInput | boolean | null
    nameplateCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    efficiency?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModuleConfigurationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    solarSystemId?: StringFieldUpdateOperationsInput | string
    configurationNumber?: IntFieldUpdateOperationsInput | number
    azimuth?: NullableFloatFieldUpdateOperationsInput | number | null
    tilt?: NullableFloatFieldUpdateOperationsInput | number | null
    moduleManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    moduleModel?: NullableStringFieldUpdateOperationsInput | string | null
    moduleQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    technologyType?: NullableStringFieldUpdateOperationsInput | string | null
    bipv?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bifacial?: NullableBoolFieldUpdateOperationsInput | boolean | null
    nameplateCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    efficiency?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InverterConfigurationCreateInput = {
    id?: string
    configurationNumber: number
    inverterManufacturer?: string | null
    inverterModel?: string | null
    inverterQuantity?: number | null
    microInverter?: boolean | null
    builtInMeter?: boolean | null
    outputCapacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    solarSystem: SolarSystemCreateNestedOneWithoutInverterConfigurationsInput
  }

  export type InverterConfigurationUncheckedCreateInput = {
    id?: string
    solarSystemId: string
    configurationNumber: number
    inverterManufacturer?: string | null
    inverterModel?: string | null
    inverterQuantity?: number | null
    microInverter?: boolean | null
    builtInMeter?: boolean | null
    outputCapacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InverterConfigurationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    configurationNumber?: IntFieldUpdateOperationsInput | number
    inverterManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    inverterModel?: NullableStringFieldUpdateOperationsInput | string | null
    inverterQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    microInverter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    builtInMeter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outputCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    solarSystem?: SolarSystemUpdateOneRequiredWithoutInverterConfigurationsNestedInput
  }

  export type InverterConfigurationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    solarSystemId?: StringFieldUpdateOperationsInput | string
    configurationNumber?: IntFieldUpdateOperationsInput | number
    inverterManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    inverterModel?: NullableStringFieldUpdateOperationsInput | string | null
    inverterQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    microInverter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    builtInMeter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outputCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InverterConfigurationCreateManyInput = {
    id?: string
    solarSystemId: string
    configurationNumber: number
    inverterManufacturer?: string | null
    inverterModel?: string | null
    inverterQuantity?: number | null
    microInverter?: boolean | null
    builtInMeter?: boolean | null
    outputCapacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InverterConfigurationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    configurationNumber?: IntFieldUpdateOperationsInput | number
    inverterManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    inverterModel?: NullableStringFieldUpdateOperationsInput | string | null
    inverterQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    microInverter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    builtInMeter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outputCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InverterConfigurationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    solarSystemId?: StringFieldUpdateOperationsInput | string
    configurationNumber?: IntFieldUpdateOperationsInput | number
    inverterManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    inverterModel?: NullableStringFieldUpdateOperationsInput | string | null
    inverterQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    microInverter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    builtInMeter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outputCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BatteryConfigurationCreateInput = {
    id?: string
    batteryManufacturer?: string | null
    batteryModel?: string | null
    ratedCapacityKw?: number | null
    ratedCapacityKwh?: number | null
    batteryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    solarSystem: SolarSystemCreateNestedOneWithoutBatteryConfigurationsInput
  }

  export type BatteryConfigurationUncheckedCreateInput = {
    id?: string
    solarSystemId: string
    batteryManufacturer?: string | null
    batteryModel?: string | null
    ratedCapacityKw?: number | null
    ratedCapacityKwh?: number | null
    batteryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BatteryConfigurationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    batteryManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    batteryModel?: NullableStringFieldUpdateOperationsInput | string | null
    ratedCapacityKw?: NullableFloatFieldUpdateOperationsInput | number | null
    ratedCapacityKwh?: NullableFloatFieldUpdateOperationsInput | number | null
    batteryPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    solarSystem?: SolarSystemUpdateOneRequiredWithoutBatteryConfigurationsNestedInput
  }

  export type BatteryConfigurationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    solarSystemId?: StringFieldUpdateOperationsInput | string
    batteryManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    batteryModel?: NullableStringFieldUpdateOperationsInput | string | null
    ratedCapacityKw?: NullableFloatFieldUpdateOperationsInput | number | null
    ratedCapacityKwh?: NullableFloatFieldUpdateOperationsInput | number | null
    batteryPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BatteryConfigurationCreateManyInput = {
    id?: string
    solarSystemId: string
    batteryManufacturer?: string | null
    batteryModel?: string | null
    ratedCapacityKw?: number | null
    ratedCapacityKwh?: number | null
    batteryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BatteryConfigurationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    batteryManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    batteryModel?: NullableStringFieldUpdateOperationsInput | string | null
    ratedCapacityKw?: NullableFloatFieldUpdateOperationsInput | number | null
    ratedCapacityKwh?: NullableFloatFieldUpdateOperationsInput | number | null
    batteryPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BatteryConfigurationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    solarSystemId?: StringFieldUpdateOperationsInput | string
    batteryManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    batteryModel?: NullableStringFieldUpdateOperationsInput | string | null
    ratedCapacityKw?: NullableFloatFieldUpdateOperationsInput | number | null
    ratedCapacityKwh?: NullableFloatFieldUpdateOperationsInput | number | null
    batteryPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ModuleConfigurationListRelationFilter = {
    every?: ModuleConfigurationWhereInput
    some?: ModuleConfigurationWhereInput
    none?: ModuleConfigurationWhereInput
  }

  export type InverterConfigurationListRelationFilter = {
    every?: InverterConfigurationWhereInput
    some?: InverterConfigurationWhereInput
    none?: InverterConfigurationWhereInput
  }

  export type BatteryConfigurationListRelationFilter = {
    every?: BatteryConfigurationWhereInput
    some?: BatteryConfigurationWhereInput
    none?: BatteryConfigurationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ModuleConfigurationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InverterConfigurationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BatteryConfigurationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SolarSystemCountOrderByAggregateInput = {
    id?: SortOrder
    dataProvider1?: SortOrder
    dataProvider2?: SortOrder
    systemId1?: SortOrder
    systemId2?: SortOrder
    installationDate?: SortOrder
    pvSystemSizeDc?: SortOrder
    totalInstalledPrice?: SortOrder
    customerSegment?: SortOrder
    expansionSystem?: SortOrder
    multiplePhaseSystem?: SortOrder
    rebateOrGrant?: SortOrder
    ttsLinkId?: SortOrder
    newConstruction?: SortOrder
    tracking?: SortOrder
    groundMounted?: SortOrder
    zipCode?: SortOrder
    city?: SortOrder
    state?: SortOrder
    utilityServiceTerritory?: SortOrder
    thirdPartyOwned?: SortOrder
    installerName?: SortOrder
    selfInstalled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SolarSystemAvgOrderByAggregateInput = {
    pvSystemSizeDc?: SortOrder
    totalInstalledPrice?: SortOrder
    rebateOrGrant?: SortOrder
  }

  export type SolarSystemMaxOrderByAggregateInput = {
    id?: SortOrder
    dataProvider1?: SortOrder
    dataProvider2?: SortOrder
    systemId1?: SortOrder
    systemId2?: SortOrder
    installationDate?: SortOrder
    pvSystemSizeDc?: SortOrder
    totalInstalledPrice?: SortOrder
    customerSegment?: SortOrder
    expansionSystem?: SortOrder
    multiplePhaseSystem?: SortOrder
    rebateOrGrant?: SortOrder
    ttsLinkId?: SortOrder
    newConstruction?: SortOrder
    tracking?: SortOrder
    groundMounted?: SortOrder
    zipCode?: SortOrder
    city?: SortOrder
    state?: SortOrder
    utilityServiceTerritory?: SortOrder
    thirdPartyOwned?: SortOrder
    installerName?: SortOrder
    selfInstalled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SolarSystemMinOrderByAggregateInput = {
    id?: SortOrder
    dataProvider1?: SortOrder
    dataProvider2?: SortOrder
    systemId1?: SortOrder
    systemId2?: SortOrder
    installationDate?: SortOrder
    pvSystemSizeDc?: SortOrder
    totalInstalledPrice?: SortOrder
    customerSegment?: SortOrder
    expansionSystem?: SortOrder
    multiplePhaseSystem?: SortOrder
    rebateOrGrant?: SortOrder
    ttsLinkId?: SortOrder
    newConstruction?: SortOrder
    tracking?: SortOrder
    groundMounted?: SortOrder
    zipCode?: SortOrder
    city?: SortOrder
    state?: SortOrder
    utilityServiceTerritory?: SortOrder
    thirdPartyOwned?: SortOrder
    installerName?: SortOrder
    selfInstalled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SolarSystemSumOrderByAggregateInput = {
    pvSystemSizeDc?: SortOrder
    totalInstalledPrice?: SortOrder
    rebateOrGrant?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SolarSystemRelationFilter = {
    is?: SolarSystemWhereInput
    isNot?: SolarSystemWhereInput
  }

  export type ModuleConfigurationCountOrderByAggregateInput = {
    id?: SortOrder
    solarSystemId?: SortOrder
    configurationNumber?: SortOrder
    azimuth?: SortOrder
    tilt?: SortOrder
    moduleManufacturer?: SortOrder
    moduleModel?: SortOrder
    moduleQuantity?: SortOrder
    technologyType?: SortOrder
    bipv?: SortOrder
    bifacial?: SortOrder
    nameplateCapacity?: SortOrder
    efficiency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ModuleConfigurationAvgOrderByAggregateInput = {
    configurationNumber?: SortOrder
    azimuth?: SortOrder
    tilt?: SortOrder
    moduleQuantity?: SortOrder
    nameplateCapacity?: SortOrder
    efficiency?: SortOrder
  }

  export type ModuleConfigurationMaxOrderByAggregateInput = {
    id?: SortOrder
    solarSystemId?: SortOrder
    configurationNumber?: SortOrder
    azimuth?: SortOrder
    tilt?: SortOrder
    moduleManufacturer?: SortOrder
    moduleModel?: SortOrder
    moduleQuantity?: SortOrder
    technologyType?: SortOrder
    bipv?: SortOrder
    bifacial?: SortOrder
    nameplateCapacity?: SortOrder
    efficiency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ModuleConfigurationMinOrderByAggregateInput = {
    id?: SortOrder
    solarSystemId?: SortOrder
    configurationNumber?: SortOrder
    azimuth?: SortOrder
    tilt?: SortOrder
    moduleManufacturer?: SortOrder
    moduleModel?: SortOrder
    moduleQuantity?: SortOrder
    technologyType?: SortOrder
    bipv?: SortOrder
    bifacial?: SortOrder
    nameplateCapacity?: SortOrder
    efficiency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ModuleConfigurationSumOrderByAggregateInput = {
    configurationNumber?: SortOrder
    azimuth?: SortOrder
    tilt?: SortOrder
    moduleQuantity?: SortOrder
    nameplateCapacity?: SortOrder
    efficiency?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type InverterConfigurationCountOrderByAggregateInput = {
    id?: SortOrder
    solarSystemId?: SortOrder
    configurationNumber?: SortOrder
    inverterManufacturer?: SortOrder
    inverterModel?: SortOrder
    inverterQuantity?: SortOrder
    microInverter?: SortOrder
    builtInMeter?: SortOrder
    outputCapacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InverterConfigurationAvgOrderByAggregateInput = {
    configurationNumber?: SortOrder
    inverterQuantity?: SortOrder
    outputCapacity?: SortOrder
  }

  export type InverterConfigurationMaxOrderByAggregateInput = {
    id?: SortOrder
    solarSystemId?: SortOrder
    configurationNumber?: SortOrder
    inverterManufacturer?: SortOrder
    inverterModel?: SortOrder
    inverterQuantity?: SortOrder
    microInverter?: SortOrder
    builtInMeter?: SortOrder
    outputCapacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InverterConfigurationMinOrderByAggregateInput = {
    id?: SortOrder
    solarSystemId?: SortOrder
    configurationNumber?: SortOrder
    inverterManufacturer?: SortOrder
    inverterModel?: SortOrder
    inverterQuantity?: SortOrder
    microInverter?: SortOrder
    builtInMeter?: SortOrder
    outputCapacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InverterConfigurationSumOrderByAggregateInput = {
    configurationNumber?: SortOrder
    inverterQuantity?: SortOrder
    outputCapacity?: SortOrder
  }

  export type BatteryConfigurationCountOrderByAggregateInput = {
    id?: SortOrder
    solarSystemId?: SortOrder
    batteryManufacturer?: SortOrder
    batteryModel?: SortOrder
    ratedCapacityKw?: SortOrder
    ratedCapacityKwh?: SortOrder
    batteryPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BatteryConfigurationAvgOrderByAggregateInput = {
    ratedCapacityKw?: SortOrder
    ratedCapacityKwh?: SortOrder
    batteryPrice?: SortOrder
  }

  export type BatteryConfigurationMaxOrderByAggregateInput = {
    id?: SortOrder
    solarSystemId?: SortOrder
    batteryManufacturer?: SortOrder
    batteryModel?: SortOrder
    ratedCapacityKw?: SortOrder
    ratedCapacityKwh?: SortOrder
    batteryPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BatteryConfigurationMinOrderByAggregateInput = {
    id?: SortOrder
    solarSystemId?: SortOrder
    batteryManufacturer?: SortOrder
    batteryModel?: SortOrder
    ratedCapacityKw?: SortOrder
    ratedCapacityKwh?: SortOrder
    batteryPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BatteryConfigurationSumOrderByAggregateInput = {
    ratedCapacityKw?: SortOrder
    ratedCapacityKwh?: SortOrder
    batteryPrice?: SortOrder
  }

  export type ModuleConfigurationCreateNestedManyWithoutSolarSystemInput = {
    create?: XOR<ModuleConfigurationCreateWithoutSolarSystemInput, ModuleConfigurationUncheckedCreateWithoutSolarSystemInput> | ModuleConfigurationCreateWithoutSolarSystemInput[] | ModuleConfigurationUncheckedCreateWithoutSolarSystemInput[]
    connectOrCreate?: ModuleConfigurationCreateOrConnectWithoutSolarSystemInput | ModuleConfigurationCreateOrConnectWithoutSolarSystemInput[]
    createMany?: ModuleConfigurationCreateManySolarSystemInputEnvelope
    connect?: ModuleConfigurationWhereUniqueInput | ModuleConfigurationWhereUniqueInput[]
  }

  export type InverterConfigurationCreateNestedManyWithoutSolarSystemInput = {
    create?: XOR<InverterConfigurationCreateWithoutSolarSystemInput, InverterConfigurationUncheckedCreateWithoutSolarSystemInput> | InverterConfigurationCreateWithoutSolarSystemInput[] | InverterConfigurationUncheckedCreateWithoutSolarSystemInput[]
    connectOrCreate?: InverterConfigurationCreateOrConnectWithoutSolarSystemInput | InverterConfigurationCreateOrConnectWithoutSolarSystemInput[]
    createMany?: InverterConfigurationCreateManySolarSystemInputEnvelope
    connect?: InverterConfigurationWhereUniqueInput | InverterConfigurationWhereUniqueInput[]
  }

  export type BatteryConfigurationCreateNestedManyWithoutSolarSystemInput = {
    create?: XOR<BatteryConfigurationCreateWithoutSolarSystemInput, BatteryConfigurationUncheckedCreateWithoutSolarSystemInput> | BatteryConfigurationCreateWithoutSolarSystemInput[] | BatteryConfigurationUncheckedCreateWithoutSolarSystemInput[]
    connectOrCreate?: BatteryConfigurationCreateOrConnectWithoutSolarSystemInput | BatteryConfigurationCreateOrConnectWithoutSolarSystemInput[]
    createMany?: BatteryConfigurationCreateManySolarSystemInputEnvelope
    connect?: BatteryConfigurationWhereUniqueInput | BatteryConfigurationWhereUniqueInput[]
  }

  export type ModuleConfigurationUncheckedCreateNestedManyWithoutSolarSystemInput = {
    create?: XOR<ModuleConfigurationCreateWithoutSolarSystemInput, ModuleConfigurationUncheckedCreateWithoutSolarSystemInput> | ModuleConfigurationCreateWithoutSolarSystemInput[] | ModuleConfigurationUncheckedCreateWithoutSolarSystemInput[]
    connectOrCreate?: ModuleConfigurationCreateOrConnectWithoutSolarSystemInput | ModuleConfigurationCreateOrConnectWithoutSolarSystemInput[]
    createMany?: ModuleConfigurationCreateManySolarSystemInputEnvelope
    connect?: ModuleConfigurationWhereUniqueInput | ModuleConfigurationWhereUniqueInput[]
  }

  export type InverterConfigurationUncheckedCreateNestedManyWithoutSolarSystemInput = {
    create?: XOR<InverterConfigurationCreateWithoutSolarSystemInput, InverterConfigurationUncheckedCreateWithoutSolarSystemInput> | InverterConfigurationCreateWithoutSolarSystemInput[] | InverterConfigurationUncheckedCreateWithoutSolarSystemInput[]
    connectOrCreate?: InverterConfigurationCreateOrConnectWithoutSolarSystemInput | InverterConfigurationCreateOrConnectWithoutSolarSystemInput[]
    createMany?: InverterConfigurationCreateManySolarSystemInputEnvelope
    connect?: InverterConfigurationWhereUniqueInput | InverterConfigurationWhereUniqueInput[]
  }

  export type BatteryConfigurationUncheckedCreateNestedManyWithoutSolarSystemInput = {
    create?: XOR<BatteryConfigurationCreateWithoutSolarSystemInput, BatteryConfigurationUncheckedCreateWithoutSolarSystemInput> | BatteryConfigurationCreateWithoutSolarSystemInput[] | BatteryConfigurationUncheckedCreateWithoutSolarSystemInput[]
    connectOrCreate?: BatteryConfigurationCreateOrConnectWithoutSolarSystemInput | BatteryConfigurationCreateOrConnectWithoutSolarSystemInput[]
    createMany?: BatteryConfigurationCreateManySolarSystemInputEnvelope
    connect?: BatteryConfigurationWhereUniqueInput | BatteryConfigurationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ModuleConfigurationUpdateManyWithoutSolarSystemNestedInput = {
    create?: XOR<ModuleConfigurationCreateWithoutSolarSystemInput, ModuleConfigurationUncheckedCreateWithoutSolarSystemInput> | ModuleConfigurationCreateWithoutSolarSystemInput[] | ModuleConfigurationUncheckedCreateWithoutSolarSystemInput[]
    connectOrCreate?: ModuleConfigurationCreateOrConnectWithoutSolarSystemInput | ModuleConfigurationCreateOrConnectWithoutSolarSystemInput[]
    upsert?: ModuleConfigurationUpsertWithWhereUniqueWithoutSolarSystemInput | ModuleConfigurationUpsertWithWhereUniqueWithoutSolarSystemInput[]
    createMany?: ModuleConfigurationCreateManySolarSystemInputEnvelope
    set?: ModuleConfigurationWhereUniqueInput | ModuleConfigurationWhereUniqueInput[]
    disconnect?: ModuleConfigurationWhereUniqueInput | ModuleConfigurationWhereUniqueInput[]
    delete?: ModuleConfigurationWhereUniqueInput | ModuleConfigurationWhereUniqueInput[]
    connect?: ModuleConfigurationWhereUniqueInput | ModuleConfigurationWhereUniqueInput[]
    update?: ModuleConfigurationUpdateWithWhereUniqueWithoutSolarSystemInput | ModuleConfigurationUpdateWithWhereUniqueWithoutSolarSystemInput[]
    updateMany?: ModuleConfigurationUpdateManyWithWhereWithoutSolarSystemInput | ModuleConfigurationUpdateManyWithWhereWithoutSolarSystemInput[]
    deleteMany?: ModuleConfigurationScalarWhereInput | ModuleConfigurationScalarWhereInput[]
  }

  export type InverterConfigurationUpdateManyWithoutSolarSystemNestedInput = {
    create?: XOR<InverterConfigurationCreateWithoutSolarSystemInput, InverterConfigurationUncheckedCreateWithoutSolarSystemInput> | InverterConfigurationCreateWithoutSolarSystemInput[] | InverterConfigurationUncheckedCreateWithoutSolarSystemInput[]
    connectOrCreate?: InverterConfigurationCreateOrConnectWithoutSolarSystemInput | InverterConfigurationCreateOrConnectWithoutSolarSystemInput[]
    upsert?: InverterConfigurationUpsertWithWhereUniqueWithoutSolarSystemInput | InverterConfigurationUpsertWithWhereUniqueWithoutSolarSystemInput[]
    createMany?: InverterConfigurationCreateManySolarSystemInputEnvelope
    set?: InverterConfigurationWhereUniqueInput | InverterConfigurationWhereUniqueInput[]
    disconnect?: InverterConfigurationWhereUniqueInput | InverterConfigurationWhereUniqueInput[]
    delete?: InverterConfigurationWhereUniqueInput | InverterConfigurationWhereUniqueInput[]
    connect?: InverterConfigurationWhereUniqueInput | InverterConfigurationWhereUniqueInput[]
    update?: InverterConfigurationUpdateWithWhereUniqueWithoutSolarSystemInput | InverterConfigurationUpdateWithWhereUniqueWithoutSolarSystemInput[]
    updateMany?: InverterConfigurationUpdateManyWithWhereWithoutSolarSystemInput | InverterConfigurationUpdateManyWithWhereWithoutSolarSystemInput[]
    deleteMany?: InverterConfigurationScalarWhereInput | InverterConfigurationScalarWhereInput[]
  }

  export type BatteryConfigurationUpdateManyWithoutSolarSystemNestedInput = {
    create?: XOR<BatteryConfigurationCreateWithoutSolarSystemInput, BatteryConfigurationUncheckedCreateWithoutSolarSystemInput> | BatteryConfigurationCreateWithoutSolarSystemInput[] | BatteryConfigurationUncheckedCreateWithoutSolarSystemInput[]
    connectOrCreate?: BatteryConfigurationCreateOrConnectWithoutSolarSystemInput | BatteryConfigurationCreateOrConnectWithoutSolarSystemInput[]
    upsert?: BatteryConfigurationUpsertWithWhereUniqueWithoutSolarSystemInput | BatteryConfigurationUpsertWithWhereUniqueWithoutSolarSystemInput[]
    createMany?: BatteryConfigurationCreateManySolarSystemInputEnvelope
    set?: BatteryConfigurationWhereUniqueInput | BatteryConfigurationWhereUniqueInput[]
    disconnect?: BatteryConfigurationWhereUniqueInput | BatteryConfigurationWhereUniqueInput[]
    delete?: BatteryConfigurationWhereUniqueInput | BatteryConfigurationWhereUniqueInput[]
    connect?: BatteryConfigurationWhereUniqueInput | BatteryConfigurationWhereUniqueInput[]
    update?: BatteryConfigurationUpdateWithWhereUniqueWithoutSolarSystemInput | BatteryConfigurationUpdateWithWhereUniqueWithoutSolarSystemInput[]
    updateMany?: BatteryConfigurationUpdateManyWithWhereWithoutSolarSystemInput | BatteryConfigurationUpdateManyWithWhereWithoutSolarSystemInput[]
    deleteMany?: BatteryConfigurationScalarWhereInput | BatteryConfigurationScalarWhereInput[]
  }

  export type ModuleConfigurationUncheckedUpdateManyWithoutSolarSystemNestedInput = {
    create?: XOR<ModuleConfigurationCreateWithoutSolarSystemInput, ModuleConfigurationUncheckedCreateWithoutSolarSystemInput> | ModuleConfigurationCreateWithoutSolarSystemInput[] | ModuleConfigurationUncheckedCreateWithoutSolarSystemInput[]
    connectOrCreate?: ModuleConfigurationCreateOrConnectWithoutSolarSystemInput | ModuleConfigurationCreateOrConnectWithoutSolarSystemInput[]
    upsert?: ModuleConfigurationUpsertWithWhereUniqueWithoutSolarSystemInput | ModuleConfigurationUpsertWithWhereUniqueWithoutSolarSystemInput[]
    createMany?: ModuleConfigurationCreateManySolarSystemInputEnvelope
    set?: ModuleConfigurationWhereUniqueInput | ModuleConfigurationWhereUniqueInput[]
    disconnect?: ModuleConfigurationWhereUniqueInput | ModuleConfigurationWhereUniqueInput[]
    delete?: ModuleConfigurationWhereUniqueInput | ModuleConfigurationWhereUniqueInput[]
    connect?: ModuleConfigurationWhereUniqueInput | ModuleConfigurationWhereUniqueInput[]
    update?: ModuleConfigurationUpdateWithWhereUniqueWithoutSolarSystemInput | ModuleConfigurationUpdateWithWhereUniqueWithoutSolarSystemInput[]
    updateMany?: ModuleConfigurationUpdateManyWithWhereWithoutSolarSystemInput | ModuleConfigurationUpdateManyWithWhereWithoutSolarSystemInput[]
    deleteMany?: ModuleConfigurationScalarWhereInput | ModuleConfigurationScalarWhereInput[]
  }

  export type InverterConfigurationUncheckedUpdateManyWithoutSolarSystemNestedInput = {
    create?: XOR<InverterConfigurationCreateWithoutSolarSystemInput, InverterConfigurationUncheckedCreateWithoutSolarSystemInput> | InverterConfigurationCreateWithoutSolarSystemInput[] | InverterConfigurationUncheckedCreateWithoutSolarSystemInput[]
    connectOrCreate?: InverterConfigurationCreateOrConnectWithoutSolarSystemInput | InverterConfigurationCreateOrConnectWithoutSolarSystemInput[]
    upsert?: InverterConfigurationUpsertWithWhereUniqueWithoutSolarSystemInput | InverterConfigurationUpsertWithWhereUniqueWithoutSolarSystemInput[]
    createMany?: InverterConfigurationCreateManySolarSystemInputEnvelope
    set?: InverterConfigurationWhereUniqueInput | InverterConfigurationWhereUniqueInput[]
    disconnect?: InverterConfigurationWhereUniqueInput | InverterConfigurationWhereUniqueInput[]
    delete?: InverterConfigurationWhereUniqueInput | InverterConfigurationWhereUniqueInput[]
    connect?: InverterConfigurationWhereUniqueInput | InverterConfigurationWhereUniqueInput[]
    update?: InverterConfigurationUpdateWithWhereUniqueWithoutSolarSystemInput | InverterConfigurationUpdateWithWhereUniqueWithoutSolarSystemInput[]
    updateMany?: InverterConfigurationUpdateManyWithWhereWithoutSolarSystemInput | InverterConfigurationUpdateManyWithWhereWithoutSolarSystemInput[]
    deleteMany?: InverterConfigurationScalarWhereInput | InverterConfigurationScalarWhereInput[]
  }

  export type BatteryConfigurationUncheckedUpdateManyWithoutSolarSystemNestedInput = {
    create?: XOR<BatteryConfigurationCreateWithoutSolarSystemInput, BatteryConfigurationUncheckedCreateWithoutSolarSystemInput> | BatteryConfigurationCreateWithoutSolarSystemInput[] | BatteryConfigurationUncheckedCreateWithoutSolarSystemInput[]
    connectOrCreate?: BatteryConfigurationCreateOrConnectWithoutSolarSystemInput | BatteryConfigurationCreateOrConnectWithoutSolarSystemInput[]
    upsert?: BatteryConfigurationUpsertWithWhereUniqueWithoutSolarSystemInput | BatteryConfigurationUpsertWithWhereUniqueWithoutSolarSystemInput[]
    createMany?: BatteryConfigurationCreateManySolarSystemInputEnvelope
    set?: BatteryConfigurationWhereUniqueInput | BatteryConfigurationWhereUniqueInput[]
    disconnect?: BatteryConfigurationWhereUniqueInput | BatteryConfigurationWhereUniqueInput[]
    delete?: BatteryConfigurationWhereUniqueInput | BatteryConfigurationWhereUniqueInput[]
    connect?: BatteryConfigurationWhereUniqueInput | BatteryConfigurationWhereUniqueInput[]
    update?: BatteryConfigurationUpdateWithWhereUniqueWithoutSolarSystemInput | BatteryConfigurationUpdateWithWhereUniqueWithoutSolarSystemInput[]
    updateMany?: BatteryConfigurationUpdateManyWithWhereWithoutSolarSystemInput | BatteryConfigurationUpdateManyWithWhereWithoutSolarSystemInput[]
    deleteMany?: BatteryConfigurationScalarWhereInput | BatteryConfigurationScalarWhereInput[]
  }

  export type SolarSystemCreateNestedOneWithoutModuleConfigurationsInput = {
    create?: XOR<SolarSystemCreateWithoutModuleConfigurationsInput, SolarSystemUncheckedCreateWithoutModuleConfigurationsInput>
    connectOrCreate?: SolarSystemCreateOrConnectWithoutModuleConfigurationsInput
    connect?: SolarSystemWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SolarSystemUpdateOneRequiredWithoutModuleConfigurationsNestedInput = {
    create?: XOR<SolarSystemCreateWithoutModuleConfigurationsInput, SolarSystemUncheckedCreateWithoutModuleConfigurationsInput>
    connectOrCreate?: SolarSystemCreateOrConnectWithoutModuleConfigurationsInput
    upsert?: SolarSystemUpsertWithoutModuleConfigurationsInput
    connect?: SolarSystemWhereUniqueInput
    update?: XOR<XOR<SolarSystemUpdateToOneWithWhereWithoutModuleConfigurationsInput, SolarSystemUpdateWithoutModuleConfigurationsInput>, SolarSystemUncheckedUpdateWithoutModuleConfigurationsInput>
  }

  export type SolarSystemCreateNestedOneWithoutInverterConfigurationsInput = {
    create?: XOR<SolarSystemCreateWithoutInverterConfigurationsInput, SolarSystemUncheckedCreateWithoutInverterConfigurationsInput>
    connectOrCreate?: SolarSystemCreateOrConnectWithoutInverterConfigurationsInput
    connect?: SolarSystemWhereUniqueInput
  }

  export type SolarSystemUpdateOneRequiredWithoutInverterConfigurationsNestedInput = {
    create?: XOR<SolarSystemCreateWithoutInverterConfigurationsInput, SolarSystemUncheckedCreateWithoutInverterConfigurationsInput>
    connectOrCreate?: SolarSystemCreateOrConnectWithoutInverterConfigurationsInput
    upsert?: SolarSystemUpsertWithoutInverterConfigurationsInput
    connect?: SolarSystemWhereUniqueInput
    update?: XOR<XOR<SolarSystemUpdateToOneWithWhereWithoutInverterConfigurationsInput, SolarSystemUpdateWithoutInverterConfigurationsInput>, SolarSystemUncheckedUpdateWithoutInverterConfigurationsInput>
  }

  export type SolarSystemCreateNestedOneWithoutBatteryConfigurationsInput = {
    create?: XOR<SolarSystemCreateWithoutBatteryConfigurationsInput, SolarSystemUncheckedCreateWithoutBatteryConfigurationsInput>
    connectOrCreate?: SolarSystemCreateOrConnectWithoutBatteryConfigurationsInput
    connect?: SolarSystemWhereUniqueInput
  }

  export type SolarSystemUpdateOneRequiredWithoutBatteryConfigurationsNestedInput = {
    create?: XOR<SolarSystemCreateWithoutBatteryConfigurationsInput, SolarSystemUncheckedCreateWithoutBatteryConfigurationsInput>
    connectOrCreate?: SolarSystemCreateOrConnectWithoutBatteryConfigurationsInput
    upsert?: SolarSystemUpsertWithoutBatteryConfigurationsInput
    connect?: SolarSystemWhereUniqueInput
    update?: XOR<XOR<SolarSystemUpdateToOneWithWhereWithoutBatteryConfigurationsInput, SolarSystemUpdateWithoutBatteryConfigurationsInput>, SolarSystemUncheckedUpdateWithoutBatteryConfigurationsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ModuleConfigurationCreateWithoutSolarSystemInput = {
    id?: string
    configurationNumber: number
    azimuth?: number | null
    tilt?: number | null
    moduleManufacturer?: string | null
    moduleModel?: string | null
    moduleQuantity?: number | null
    technologyType?: string | null
    bipv?: boolean | null
    bifacial?: boolean | null
    nameplateCapacity?: number | null
    efficiency?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ModuleConfigurationUncheckedCreateWithoutSolarSystemInput = {
    id?: string
    configurationNumber: number
    azimuth?: number | null
    tilt?: number | null
    moduleManufacturer?: string | null
    moduleModel?: string | null
    moduleQuantity?: number | null
    technologyType?: string | null
    bipv?: boolean | null
    bifacial?: boolean | null
    nameplateCapacity?: number | null
    efficiency?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ModuleConfigurationCreateOrConnectWithoutSolarSystemInput = {
    where: ModuleConfigurationWhereUniqueInput
    create: XOR<ModuleConfigurationCreateWithoutSolarSystemInput, ModuleConfigurationUncheckedCreateWithoutSolarSystemInput>
  }

  export type ModuleConfigurationCreateManySolarSystemInputEnvelope = {
    data: ModuleConfigurationCreateManySolarSystemInput | ModuleConfigurationCreateManySolarSystemInput[]
    skipDuplicates?: boolean
  }

  export type InverterConfigurationCreateWithoutSolarSystemInput = {
    id?: string
    configurationNumber: number
    inverterManufacturer?: string | null
    inverterModel?: string | null
    inverterQuantity?: number | null
    microInverter?: boolean | null
    builtInMeter?: boolean | null
    outputCapacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InverterConfigurationUncheckedCreateWithoutSolarSystemInput = {
    id?: string
    configurationNumber: number
    inverterManufacturer?: string | null
    inverterModel?: string | null
    inverterQuantity?: number | null
    microInverter?: boolean | null
    builtInMeter?: boolean | null
    outputCapacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InverterConfigurationCreateOrConnectWithoutSolarSystemInput = {
    where: InverterConfigurationWhereUniqueInput
    create: XOR<InverterConfigurationCreateWithoutSolarSystemInput, InverterConfigurationUncheckedCreateWithoutSolarSystemInput>
  }

  export type InverterConfigurationCreateManySolarSystemInputEnvelope = {
    data: InverterConfigurationCreateManySolarSystemInput | InverterConfigurationCreateManySolarSystemInput[]
    skipDuplicates?: boolean
  }

  export type BatteryConfigurationCreateWithoutSolarSystemInput = {
    id?: string
    batteryManufacturer?: string | null
    batteryModel?: string | null
    ratedCapacityKw?: number | null
    ratedCapacityKwh?: number | null
    batteryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BatteryConfigurationUncheckedCreateWithoutSolarSystemInput = {
    id?: string
    batteryManufacturer?: string | null
    batteryModel?: string | null
    ratedCapacityKw?: number | null
    ratedCapacityKwh?: number | null
    batteryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BatteryConfigurationCreateOrConnectWithoutSolarSystemInput = {
    where: BatteryConfigurationWhereUniqueInput
    create: XOR<BatteryConfigurationCreateWithoutSolarSystemInput, BatteryConfigurationUncheckedCreateWithoutSolarSystemInput>
  }

  export type BatteryConfigurationCreateManySolarSystemInputEnvelope = {
    data: BatteryConfigurationCreateManySolarSystemInput | BatteryConfigurationCreateManySolarSystemInput[]
    skipDuplicates?: boolean
  }

  export type ModuleConfigurationUpsertWithWhereUniqueWithoutSolarSystemInput = {
    where: ModuleConfigurationWhereUniqueInput
    update: XOR<ModuleConfigurationUpdateWithoutSolarSystemInput, ModuleConfigurationUncheckedUpdateWithoutSolarSystemInput>
    create: XOR<ModuleConfigurationCreateWithoutSolarSystemInput, ModuleConfigurationUncheckedCreateWithoutSolarSystemInput>
  }

  export type ModuleConfigurationUpdateWithWhereUniqueWithoutSolarSystemInput = {
    where: ModuleConfigurationWhereUniqueInput
    data: XOR<ModuleConfigurationUpdateWithoutSolarSystemInput, ModuleConfigurationUncheckedUpdateWithoutSolarSystemInput>
  }

  export type ModuleConfigurationUpdateManyWithWhereWithoutSolarSystemInput = {
    where: ModuleConfigurationScalarWhereInput
    data: XOR<ModuleConfigurationUpdateManyMutationInput, ModuleConfigurationUncheckedUpdateManyWithoutSolarSystemInput>
  }

  export type ModuleConfigurationScalarWhereInput = {
    AND?: ModuleConfigurationScalarWhereInput | ModuleConfigurationScalarWhereInput[]
    OR?: ModuleConfigurationScalarWhereInput[]
    NOT?: ModuleConfigurationScalarWhereInput | ModuleConfigurationScalarWhereInput[]
    id?: StringFilter<"ModuleConfiguration"> | string
    solarSystemId?: StringFilter<"ModuleConfiguration"> | string
    configurationNumber?: IntFilter<"ModuleConfiguration"> | number
    azimuth?: FloatNullableFilter<"ModuleConfiguration"> | number | null
    tilt?: FloatNullableFilter<"ModuleConfiguration"> | number | null
    moduleManufacturer?: StringNullableFilter<"ModuleConfiguration"> | string | null
    moduleModel?: StringNullableFilter<"ModuleConfiguration"> | string | null
    moduleQuantity?: IntNullableFilter<"ModuleConfiguration"> | number | null
    technologyType?: StringNullableFilter<"ModuleConfiguration"> | string | null
    bipv?: BoolNullableFilter<"ModuleConfiguration"> | boolean | null
    bifacial?: BoolNullableFilter<"ModuleConfiguration"> | boolean | null
    nameplateCapacity?: FloatNullableFilter<"ModuleConfiguration"> | number | null
    efficiency?: FloatNullableFilter<"ModuleConfiguration"> | number | null
    createdAt?: DateTimeFilter<"ModuleConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"ModuleConfiguration"> | Date | string
  }

  export type InverterConfigurationUpsertWithWhereUniqueWithoutSolarSystemInput = {
    where: InverterConfigurationWhereUniqueInput
    update: XOR<InverterConfigurationUpdateWithoutSolarSystemInput, InverterConfigurationUncheckedUpdateWithoutSolarSystemInput>
    create: XOR<InverterConfigurationCreateWithoutSolarSystemInput, InverterConfigurationUncheckedCreateWithoutSolarSystemInput>
  }

  export type InverterConfigurationUpdateWithWhereUniqueWithoutSolarSystemInput = {
    where: InverterConfigurationWhereUniqueInput
    data: XOR<InverterConfigurationUpdateWithoutSolarSystemInput, InverterConfigurationUncheckedUpdateWithoutSolarSystemInput>
  }

  export type InverterConfigurationUpdateManyWithWhereWithoutSolarSystemInput = {
    where: InverterConfigurationScalarWhereInput
    data: XOR<InverterConfigurationUpdateManyMutationInput, InverterConfigurationUncheckedUpdateManyWithoutSolarSystemInput>
  }

  export type InverterConfigurationScalarWhereInput = {
    AND?: InverterConfigurationScalarWhereInput | InverterConfigurationScalarWhereInput[]
    OR?: InverterConfigurationScalarWhereInput[]
    NOT?: InverterConfigurationScalarWhereInput | InverterConfigurationScalarWhereInput[]
    id?: StringFilter<"InverterConfiguration"> | string
    solarSystemId?: StringFilter<"InverterConfiguration"> | string
    configurationNumber?: IntFilter<"InverterConfiguration"> | number
    inverterManufacturer?: StringNullableFilter<"InverterConfiguration"> | string | null
    inverterModel?: StringNullableFilter<"InverterConfiguration"> | string | null
    inverterQuantity?: IntNullableFilter<"InverterConfiguration"> | number | null
    microInverter?: BoolNullableFilter<"InverterConfiguration"> | boolean | null
    builtInMeter?: BoolNullableFilter<"InverterConfiguration"> | boolean | null
    outputCapacity?: FloatNullableFilter<"InverterConfiguration"> | number | null
    createdAt?: DateTimeFilter<"InverterConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"InverterConfiguration"> | Date | string
  }

  export type BatteryConfigurationUpsertWithWhereUniqueWithoutSolarSystemInput = {
    where: BatteryConfigurationWhereUniqueInput
    update: XOR<BatteryConfigurationUpdateWithoutSolarSystemInput, BatteryConfigurationUncheckedUpdateWithoutSolarSystemInput>
    create: XOR<BatteryConfigurationCreateWithoutSolarSystemInput, BatteryConfigurationUncheckedCreateWithoutSolarSystemInput>
  }

  export type BatteryConfigurationUpdateWithWhereUniqueWithoutSolarSystemInput = {
    where: BatteryConfigurationWhereUniqueInput
    data: XOR<BatteryConfigurationUpdateWithoutSolarSystemInput, BatteryConfigurationUncheckedUpdateWithoutSolarSystemInput>
  }

  export type BatteryConfigurationUpdateManyWithWhereWithoutSolarSystemInput = {
    where: BatteryConfigurationScalarWhereInput
    data: XOR<BatteryConfigurationUpdateManyMutationInput, BatteryConfigurationUncheckedUpdateManyWithoutSolarSystemInput>
  }

  export type BatteryConfigurationScalarWhereInput = {
    AND?: BatteryConfigurationScalarWhereInput | BatteryConfigurationScalarWhereInput[]
    OR?: BatteryConfigurationScalarWhereInput[]
    NOT?: BatteryConfigurationScalarWhereInput | BatteryConfigurationScalarWhereInput[]
    id?: StringFilter<"BatteryConfiguration"> | string
    solarSystemId?: StringFilter<"BatteryConfiguration"> | string
    batteryManufacturer?: StringNullableFilter<"BatteryConfiguration"> | string | null
    batteryModel?: StringNullableFilter<"BatteryConfiguration"> | string | null
    ratedCapacityKw?: FloatNullableFilter<"BatteryConfiguration"> | number | null
    ratedCapacityKwh?: FloatNullableFilter<"BatteryConfiguration"> | number | null
    batteryPrice?: FloatNullableFilter<"BatteryConfiguration"> | number | null
    createdAt?: DateTimeFilter<"BatteryConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"BatteryConfiguration"> | Date | string
  }

  export type SolarSystemCreateWithoutModuleConfigurationsInput = {
    id?: string
    dataProvider1?: string | null
    dataProvider2?: string | null
    systemId1?: string | null
    systemId2?: string | null
    installationDate?: Date | string | null
    pvSystemSizeDc?: number | null
    totalInstalledPrice?: number | null
    customerSegment?: string | null
    expansionSystem?: boolean | null
    multiplePhaseSystem?: boolean | null
    rebateOrGrant?: number | null
    ttsLinkId?: string | null
    newConstruction?: boolean | null
    tracking?: boolean | null
    groundMounted?: boolean | null
    zipCode?: string | null
    city?: string | null
    state?: string | null
    utilityServiceTerritory?: string | null
    thirdPartyOwned?: boolean | null
    installerName?: string | null
    selfInstalled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inverterConfigurations?: InverterConfigurationCreateNestedManyWithoutSolarSystemInput
    batteryConfigurations?: BatteryConfigurationCreateNestedManyWithoutSolarSystemInput
  }

  export type SolarSystemUncheckedCreateWithoutModuleConfigurationsInput = {
    id?: string
    dataProvider1?: string | null
    dataProvider2?: string | null
    systemId1?: string | null
    systemId2?: string | null
    installationDate?: Date | string | null
    pvSystemSizeDc?: number | null
    totalInstalledPrice?: number | null
    customerSegment?: string | null
    expansionSystem?: boolean | null
    multiplePhaseSystem?: boolean | null
    rebateOrGrant?: number | null
    ttsLinkId?: string | null
    newConstruction?: boolean | null
    tracking?: boolean | null
    groundMounted?: boolean | null
    zipCode?: string | null
    city?: string | null
    state?: string | null
    utilityServiceTerritory?: string | null
    thirdPartyOwned?: boolean | null
    installerName?: string | null
    selfInstalled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inverterConfigurations?: InverterConfigurationUncheckedCreateNestedManyWithoutSolarSystemInput
    batteryConfigurations?: BatteryConfigurationUncheckedCreateNestedManyWithoutSolarSystemInput
  }

  export type SolarSystemCreateOrConnectWithoutModuleConfigurationsInput = {
    where: SolarSystemWhereUniqueInput
    create: XOR<SolarSystemCreateWithoutModuleConfigurationsInput, SolarSystemUncheckedCreateWithoutModuleConfigurationsInput>
  }

  export type SolarSystemUpsertWithoutModuleConfigurationsInput = {
    update: XOR<SolarSystemUpdateWithoutModuleConfigurationsInput, SolarSystemUncheckedUpdateWithoutModuleConfigurationsInput>
    create: XOR<SolarSystemCreateWithoutModuleConfigurationsInput, SolarSystemUncheckedCreateWithoutModuleConfigurationsInput>
    where?: SolarSystemWhereInput
  }

  export type SolarSystemUpdateToOneWithWhereWithoutModuleConfigurationsInput = {
    where?: SolarSystemWhereInput
    data: XOR<SolarSystemUpdateWithoutModuleConfigurationsInput, SolarSystemUncheckedUpdateWithoutModuleConfigurationsInput>
  }

  export type SolarSystemUpdateWithoutModuleConfigurationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataProvider1?: NullableStringFieldUpdateOperationsInput | string | null
    dataProvider2?: NullableStringFieldUpdateOperationsInput | string | null
    systemId1?: NullableStringFieldUpdateOperationsInput | string | null
    systemId2?: NullableStringFieldUpdateOperationsInput | string | null
    installationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pvSystemSizeDc?: NullableFloatFieldUpdateOperationsInput | number | null
    totalInstalledPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customerSegment?: NullableStringFieldUpdateOperationsInput | string | null
    expansionSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    multiplePhaseSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rebateOrGrant?: NullableFloatFieldUpdateOperationsInput | number | null
    ttsLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    newConstruction?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tracking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    groundMounted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    utilityServiceTerritory?: NullableStringFieldUpdateOperationsInput | string | null
    thirdPartyOwned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    installerName?: NullableStringFieldUpdateOperationsInput | string | null
    selfInstalled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inverterConfigurations?: InverterConfigurationUpdateManyWithoutSolarSystemNestedInput
    batteryConfigurations?: BatteryConfigurationUpdateManyWithoutSolarSystemNestedInput
  }

  export type SolarSystemUncheckedUpdateWithoutModuleConfigurationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataProvider1?: NullableStringFieldUpdateOperationsInput | string | null
    dataProvider2?: NullableStringFieldUpdateOperationsInput | string | null
    systemId1?: NullableStringFieldUpdateOperationsInput | string | null
    systemId2?: NullableStringFieldUpdateOperationsInput | string | null
    installationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pvSystemSizeDc?: NullableFloatFieldUpdateOperationsInput | number | null
    totalInstalledPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customerSegment?: NullableStringFieldUpdateOperationsInput | string | null
    expansionSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    multiplePhaseSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rebateOrGrant?: NullableFloatFieldUpdateOperationsInput | number | null
    ttsLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    newConstruction?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tracking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    groundMounted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    utilityServiceTerritory?: NullableStringFieldUpdateOperationsInput | string | null
    thirdPartyOwned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    installerName?: NullableStringFieldUpdateOperationsInput | string | null
    selfInstalled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inverterConfigurations?: InverterConfigurationUncheckedUpdateManyWithoutSolarSystemNestedInput
    batteryConfigurations?: BatteryConfigurationUncheckedUpdateManyWithoutSolarSystemNestedInput
  }

  export type SolarSystemCreateWithoutInverterConfigurationsInput = {
    id?: string
    dataProvider1?: string | null
    dataProvider2?: string | null
    systemId1?: string | null
    systemId2?: string | null
    installationDate?: Date | string | null
    pvSystemSizeDc?: number | null
    totalInstalledPrice?: number | null
    customerSegment?: string | null
    expansionSystem?: boolean | null
    multiplePhaseSystem?: boolean | null
    rebateOrGrant?: number | null
    ttsLinkId?: string | null
    newConstruction?: boolean | null
    tracking?: boolean | null
    groundMounted?: boolean | null
    zipCode?: string | null
    city?: string | null
    state?: string | null
    utilityServiceTerritory?: string | null
    thirdPartyOwned?: boolean | null
    installerName?: string | null
    selfInstalled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    moduleConfigurations?: ModuleConfigurationCreateNestedManyWithoutSolarSystemInput
    batteryConfigurations?: BatteryConfigurationCreateNestedManyWithoutSolarSystemInput
  }

  export type SolarSystemUncheckedCreateWithoutInverterConfigurationsInput = {
    id?: string
    dataProvider1?: string | null
    dataProvider2?: string | null
    systemId1?: string | null
    systemId2?: string | null
    installationDate?: Date | string | null
    pvSystemSizeDc?: number | null
    totalInstalledPrice?: number | null
    customerSegment?: string | null
    expansionSystem?: boolean | null
    multiplePhaseSystem?: boolean | null
    rebateOrGrant?: number | null
    ttsLinkId?: string | null
    newConstruction?: boolean | null
    tracking?: boolean | null
    groundMounted?: boolean | null
    zipCode?: string | null
    city?: string | null
    state?: string | null
    utilityServiceTerritory?: string | null
    thirdPartyOwned?: boolean | null
    installerName?: string | null
    selfInstalled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    moduleConfigurations?: ModuleConfigurationUncheckedCreateNestedManyWithoutSolarSystemInput
    batteryConfigurations?: BatteryConfigurationUncheckedCreateNestedManyWithoutSolarSystemInput
  }

  export type SolarSystemCreateOrConnectWithoutInverterConfigurationsInput = {
    where: SolarSystemWhereUniqueInput
    create: XOR<SolarSystemCreateWithoutInverterConfigurationsInput, SolarSystemUncheckedCreateWithoutInverterConfigurationsInput>
  }

  export type SolarSystemUpsertWithoutInverterConfigurationsInput = {
    update: XOR<SolarSystemUpdateWithoutInverterConfigurationsInput, SolarSystemUncheckedUpdateWithoutInverterConfigurationsInput>
    create: XOR<SolarSystemCreateWithoutInverterConfigurationsInput, SolarSystemUncheckedCreateWithoutInverterConfigurationsInput>
    where?: SolarSystemWhereInput
  }

  export type SolarSystemUpdateToOneWithWhereWithoutInverterConfigurationsInput = {
    where?: SolarSystemWhereInput
    data: XOR<SolarSystemUpdateWithoutInverterConfigurationsInput, SolarSystemUncheckedUpdateWithoutInverterConfigurationsInput>
  }

  export type SolarSystemUpdateWithoutInverterConfigurationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataProvider1?: NullableStringFieldUpdateOperationsInput | string | null
    dataProvider2?: NullableStringFieldUpdateOperationsInput | string | null
    systemId1?: NullableStringFieldUpdateOperationsInput | string | null
    systemId2?: NullableStringFieldUpdateOperationsInput | string | null
    installationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pvSystemSizeDc?: NullableFloatFieldUpdateOperationsInput | number | null
    totalInstalledPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customerSegment?: NullableStringFieldUpdateOperationsInput | string | null
    expansionSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    multiplePhaseSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rebateOrGrant?: NullableFloatFieldUpdateOperationsInput | number | null
    ttsLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    newConstruction?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tracking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    groundMounted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    utilityServiceTerritory?: NullableStringFieldUpdateOperationsInput | string | null
    thirdPartyOwned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    installerName?: NullableStringFieldUpdateOperationsInput | string | null
    selfInstalled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    moduleConfigurations?: ModuleConfigurationUpdateManyWithoutSolarSystemNestedInput
    batteryConfigurations?: BatteryConfigurationUpdateManyWithoutSolarSystemNestedInput
  }

  export type SolarSystemUncheckedUpdateWithoutInverterConfigurationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataProvider1?: NullableStringFieldUpdateOperationsInput | string | null
    dataProvider2?: NullableStringFieldUpdateOperationsInput | string | null
    systemId1?: NullableStringFieldUpdateOperationsInput | string | null
    systemId2?: NullableStringFieldUpdateOperationsInput | string | null
    installationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pvSystemSizeDc?: NullableFloatFieldUpdateOperationsInput | number | null
    totalInstalledPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customerSegment?: NullableStringFieldUpdateOperationsInput | string | null
    expansionSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    multiplePhaseSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rebateOrGrant?: NullableFloatFieldUpdateOperationsInput | number | null
    ttsLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    newConstruction?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tracking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    groundMounted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    utilityServiceTerritory?: NullableStringFieldUpdateOperationsInput | string | null
    thirdPartyOwned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    installerName?: NullableStringFieldUpdateOperationsInput | string | null
    selfInstalled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    moduleConfigurations?: ModuleConfigurationUncheckedUpdateManyWithoutSolarSystemNestedInput
    batteryConfigurations?: BatteryConfigurationUncheckedUpdateManyWithoutSolarSystemNestedInput
  }

  export type SolarSystemCreateWithoutBatteryConfigurationsInput = {
    id?: string
    dataProvider1?: string | null
    dataProvider2?: string | null
    systemId1?: string | null
    systemId2?: string | null
    installationDate?: Date | string | null
    pvSystemSizeDc?: number | null
    totalInstalledPrice?: number | null
    customerSegment?: string | null
    expansionSystem?: boolean | null
    multiplePhaseSystem?: boolean | null
    rebateOrGrant?: number | null
    ttsLinkId?: string | null
    newConstruction?: boolean | null
    tracking?: boolean | null
    groundMounted?: boolean | null
    zipCode?: string | null
    city?: string | null
    state?: string | null
    utilityServiceTerritory?: string | null
    thirdPartyOwned?: boolean | null
    installerName?: string | null
    selfInstalled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    moduleConfigurations?: ModuleConfigurationCreateNestedManyWithoutSolarSystemInput
    inverterConfigurations?: InverterConfigurationCreateNestedManyWithoutSolarSystemInput
  }

  export type SolarSystemUncheckedCreateWithoutBatteryConfigurationsInput = {
    id?: string
    dataProvider1?: string | null
    dataProvider2?: string | null
    systemId1?: string | null
    systemId2?: string | null
    installationDate?: Date | string | null
    pvSystemSizeDc?: number | null
    totalInstalledPrice?: number | null
    customerSegment?: string | null
    expansionSystem?: boolean | null
    multiplePhaseSystem?: boolean | null
    rebateOrGrant?: number | null
    ttsLinkId?: string | null
    newConstruction?: boolean | null
    tracking?: boolean | null
    groundMounted?: boolean | null
    zipCode?: string | null
    city?: string | null
    state?: string | null
    utilityServiceTerritory?: string | null
    thirdPartyOwned?: boolean | null
    installerName?: string | null
    selfInstalled?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    moduleConfigurations?: ModuleConfigurationUncheckedCreateNestedManyWithoutSolarSystemInput
    inverterConfigurations?: InverterConfigurationUncheckedCreateNestedManyWithoutSolarSystemInput
  }

  export type SolarSystemCreateOrConnectWithoutBatteryConfigurationsInput = {
    where: SolarSystemWhereUniqueInput
    create: XOR<SolarSystemCreateWithoutBatteryConfigurationsInput, SolarSystemUncheckedCreateWithoutBatteryConfigurationsInput>
  }

  export type SolarSystemUpsertWithoutBatteryConfigurationsInput = {
    update: XOR<SolarSystemUpdateWithoutBatteryConfigurationsInput, SolarSystemUncheckedUpdateWithoutBatteryConfigurationsInput>
    create: XOR<SolarSystemCreateWithoutBatteryConfigurationsInput, SolarSystemUncheckedCreateWithoutBatteryConfigurationsInput>
    where?: SolarSystemWhereInput
  }

  export type SolarSystemUpdateToOneWithWhereWithoutBatteryConfigurationsInput = {
    where?: SolarSystemWhereInput
    data: XOR<SolarSystemUpdateWithoutBatteryConfigurationsInput, SolarSystemUncheckedUpdateWithoutBatteryConfigurationsInput>
  }

  export type SolarSystemUpdateWithoutBatteryConfigurationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataProvider1?: NullableStringFieldUpdateOperationsInput | string | null
    dataProvider2?: NullableStringFieldUpdateOperationsInput | string | null
    systemId1?: NullableStringFieldUpdateOperationsInput | string | null
    systemId2?: NullableStringFieldUpdateOperationsInput | string | null
    installationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pvSystemSizeDc?: NullableFloatFieldUpdateOperationsInput | number | null
    totalInstalledPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customerSegment?: NullableStringFieldUpdateOperationsInput | string | null
    expansionSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    multiplePhaseSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rebateOrGrant?: NullableFloatFieldUpdateOperationsInput | number | null
    ttsLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    newConstruction?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tracking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    groundMounted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    utilityServiceTerritory?: NullableStringFieldUpdateOperationsInput | string | null
    thirdPartyOwned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    installerName?: NullableStringFieldUpdateOperationsInput | string | null
    selfInstalled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    moduleConfigurations?: ModuleConfigurationUpdateManyWithoutSolarSystemNestedInput
    inverterConfigurations?: InverterConfigurationUpdateManyWithoutSolarSystemNestedInput
  }

  export type SolarSystemUncheckedUpdateWithoutBatteryConfigurationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataProvider1?: NullableStringFieldUpdateOperationsInput | string | null
    dataProvider2?: NullableStringFieldUpdateOperationsInput | string | null
    systemId1?: NullableStringFieldUpdateOperationsInput | string | null
    systemId2?: NullableStringFieldUpdateOperationsInput | string | null
    installationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pvSystemSizeDc?: NullableFloatFieldUpdateOperationsInput | number | null
    totalInstalledPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    customerSegment?: NullableStringFieldUpdateOperationsInput | string | null
    expansionSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    multiplePhaseSystem?: NullableBoolFieldUpdateOperationsInput | boolean | null
    rebateOrGrant?: NullableFloatFieldUpdateOperationsInput | number | null
    ttsLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    newConstruction?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tracking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    groundMounted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    utilityServiceTerritory?: NullableStringFieldUpdateOperationsInput | string | null
    thirdPartyOwned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    installerName?: NullableStringFieldUpdateOperationsInput | string | null
    selfInstalled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    moduleConfigurations?: ModuleConfigurationUncheckedUpdateManyWithoutSolarSystemNestedInput
    inverterConfigurations?: InverterConfigurationUncheckedUpdateManyWithoutSolarSystemNestedInput
  }

  export type ModuleConfigurationCreateManySolarSystemInput = {
    id?: string
    configurationNumber: number
    azimuth?: number | null
    tilt?: number | null
    moduleManufacturer?: string | null
    moduleModel?: string | null
    moduleQuantity?: number | null
    technologyType?: string | null
    bipv?: boolean | null
    bifacial?: boolean | null
    nameplateCapacity?: number | null
    efficiency?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InverterConfigurationCreateManySolarSystemInput = {
    id?: string
    configurationNumber: number
    inverterManufacturer?: string | null
    inverterModel?: string | null
    inverterQuantity?: number | null
    microInverter?: boolean | null
    builtInMeter?: boolean | null
    outputCapacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BatteryConfigurationCreateManySolarSystemInput = {
    id?: string
    batteryManufacturer?: string | null
    batteryModel?: string | null
    ratedCapacityKw?: number | null
    ratedCapacityKwh?: number | null
    batteryPrice?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ModuleConfigurationUpdateWithoutSolarSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    configurationNumber?: IntFieldUpdateOperationsInput | number
    azimuth?: NullableFloatFieldUpdateOperationsInput | number | null
    tilt?: NullableFloatFieldUpdateOperationsInput | number | null
    moduleManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    moduleModel?: NullableStringFieldUpdateOperationsInput | string | null
    moduleQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    technologyType?: NullableStringFieldUpdateOperationsInput | string | null
    bipv?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bifacial?: NullableBoolFieldUpdateOperationsInput | boolean | null
    nameplateCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    efficiency?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModuleConfigurationUncheckedUpdateWithoutSolarSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    configurationNumber?: IntFieldUpdateOperationsInput | number
    azimuth?: NullableFloatFieldUpdateOperationsInput | number | null
    tilt?: NullableFloatFieldUpdateOperationsInput | number | null
    moduleManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    moduleModel?: NullableStringFieldUpdateOperationsInput | string | null
    moduleQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    technologyType?: NullableStringFieldUpdateOperationsInput | string | null
    bipv?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bifacial?: NullableBoolFieldUpdateOperationsInput | boolean | null
    nameplateCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    efficiency?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModuleConfigurationUncheckedUpdateManyWithoutSolarSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    configurationNumber?: IntFieldUpdateOperationsInput | number
    azimuth?: NullableFloatFieldUpdateOperationsInput | number | null
    tilt?: NullableFloatFieldUpdateOperationsInput | number | null
    moduleManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    moduleModel?: NullableStringFieldUpdateOperationsInput | string | null
    moduleQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    technologyType?: NullableStringFieldUpdateOperationsInput | string | null
    bipv?: NullableBoolFieldUpdateOperationsInput | boolean | null
    bifacial?: NullableBoolFieldUpdateOperationsInput | boolean | null
    nameplateCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    efficiency?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InverterConfigurationUpdateWithoutSolarSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    configurationNumber?: IntFieldUpdateOperationsInput | number
    inverterManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    inverterModel?: NullableStringFieldUpdateOperationsInput | string | null
    inverterQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    microInverter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    builtInMeter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outputCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InverterConfigurationUncheckedUpdateWithoutSolarSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    configurationNumber?: IntFieldUpdateOperationsInput | number
    inverterManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    inverterModel?: NullableStringFieldUpdateOperationsInput | string | null
    inverterQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    microInverter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    builtInMeter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outputCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InverterConfigurationUncheckedUpdateManyWithoutSolarSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    configurationNumber?: IntFieldUpdateOperationsInput | number
    inverterManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    inverterModel?: NullableStringFieldUpdateOperationsInput | string | null
    inverterQuantity?: NullableIntFieldUpdateOperationsInput | number | null
    microInverter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    builtInMeter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    outputCapacity?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BatteryConfigurationUpdateWithoutSolarSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    batteryManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    batteryModel?: NullableStringFieldUpdateOperationsInput | string | null
    ratedCapacityKw?: NullableFloatFieldUpdateOperationsInput | number | null
    ratedCapacityKwh?: NullableFloatFieldUpdateOperationsInput | number | null
    batteryPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BatteryConfigurationUncheckedUpdateWithoutSolarSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    batteryManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    batteryModel?: NullableStringFieldUpdateOperationsInput | string | null
    ratedCapacityKw?: NullableFloatFieldUpdateOperationsInput | number | null
    ratedCapacityKwh?: NullableFloatFieldUpdateOperationsInput | number | null
    batteryPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BatteryConfigurationUncheckedUpdateManyWithoutSolarSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    batteryManufacturer?: NullableStringFieldUpdateOperationsInput | string | null
    batteryModel?: NullableStringFieldUpdateOperationsInput | string | null
    ratedCapacityKw?: NullableFloatFieldUpdateOperationsInput | number | null
    ratedCapacityKwh?: NullableFloatFieldUpdateOperationsInput | number | null
    batteryPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use SolarSystemCountOutputTypeDefaultArgs instead
     */
    export type SolarSystemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SolarSystemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SolarSystemDefaultArgs instead
     */
    export type SolarSystemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SolarSystemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ModuleConfigurationDefaultArgs instead
     */
    export type ModuleConfigurationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ModuleConfigurationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InverterConfigurationDefaultArgs instead
     */
    export type InverterConfigurationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InverterConfigurationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BatteryConfigurationDefaultArgs instead
     */
    export type BatteryConfigurationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BatteryConfigurationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}